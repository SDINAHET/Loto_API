# name: 🚀 CI/CD - Loto Tracker API (Vercel)

# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main
#       - develop

# jobs:
#   build:
#     name: 🏗 Build & Test API
#     runs-on: ubuntu-latest

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'
#           cache: 'maven'

#       - name: 📦 Build with Maven (install dependencies)
#         run: mvn clean install -DskipTests

#       - name: 🧪 Run Tests
#         run: mvn test

#     #   - name: 📊 Upload Test Coverage to Codecov
#     #     uses: codecov/codecov-action@v4
#     #     with:
#     #       token: ${{ secrets.CODECOV_TOKEN }}
#     #       files: target/site/jacoco/jacoco.xml
#     #       fail_ci_if_error: true
#     #       verbose: true

#   start-app:
#     name: 🚀 Start Spring Boot App
#     runs-on: ubuntu-latest
#     needs: build
#     if: github.ref == 'refs/heads/main'

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'

#       - name: 🚀 Run Spring Boot Application
#         run: mvn spring-boot:run &
#         env:
#           SPRING_PROFILES_ACTIVE: developpement

#       - name: 🛑 Wait for app to start (timeout 30s)
#         run: sleep 30

#       - name: 🛠 Test if app is running
#         run: curl --fail http://localhost:8082/api/hello || exit 1

#   deploy:
#     name: 🚀 Deploy to Vercel
#     runs-on: ubuntu-latest
#     needs: start-app
#     if: github.ref == 'refs/heads/main'

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: ⚡ Install Vercel CLI
#         run: npm install -g vercel

#     #   - name: 🚀 Deploy to Vercel
#     #     run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}


# name: 🚀 CI/CD - Loto Tracker API (Vercel)

# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main
#       - develop

# jobs:
#   build:
#     name: 🏗 Build & Test API
#     runs-on: ubuntu-latest

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'
#           cache: 'maven'

#       - name: 📦 Build with Maven (install dependencies)
#         run: mvn clean install -DskipTests

#       - name: 🧪 Run Tests
#         run: mvn test --fail-at-end
#         continue-on-error: true

#       - name: 📊 Upload Test Results (JUnit)
#         uses: actions/upload-artifact@v3
#         with:
#           name: test-results
#           path: target/surefire-reports/*.xml

#   start-app:
#     name: 🚀 Start Spring Boot App
#     runs-on: ubuntu-latest
#     needs: build
#     if: github.ref == 'refs/heads/main'

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'

#       - name: 🚀 Run Spring Boot Application
#         run: mvn spring-boot:run &
#         env:
#           SPRING_PROFILES_ACTIVE: developpement

#       - name: 🛑 Wait for app to start (timeout 30s)
#         run: sleep 30

#       - name: 🛠 Test if app is running
#         run: curl --fail http://localhost:8082/api/hello || exit 1

#   deploy:
#     name: 🚀 Deploy to Vercel
#     runs-on: ubuntu-latest
#     needs: start-app
#     if: github.ref == 'refs/heads/main'

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: ⚡ Install Vercel CLI
#         run: npm install -g vercel

#       # - name: 🚀 Deploy to Vercel
#       #   run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}


# name: 🚀 CI/CD - Loto Tracker API (Vercel)

# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main
#       - develop

# jobs:
#   build:
#     name: 🏗 Build & Test API (Docker)
#     runs-on: ubuntu-latest

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'
#           cache: 'maven'

#       - name: 🐳 Start Docker Containers
#         run: docker-compose up -d --build

#       - name: ⏳ Wait for services to be ready
#         run: |
#           echo "Waiting for services to start..."
#           sleep 30  # Ajuste en fonction du temps de démarrage de la BDD

#       - name: 📦 Build with Maven (install dependencies)
#         run: mvn clean install -DskipTests

#       - name: 🧪 Run Tests
#         run: mvn test

#       - name: 🛑 Stop & Clean Docker Containers
#         run: docker-compose down -v

#   start-app:
#     name: 🚀 Start Spring Boot App
#     runs-on: ubuntu-latest
#     needs: build
#     if: github.ref == 'refs/heads/main'

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'

#       - name: 🚀 Run Spring Boot Application
#         run: mvn spring-boot:run &
#         env:
#           SPRING_PROFILES_ACTIVE: developpement

#       - name: 🛑 Wait for app to start (timeout 30s)
#         run: sleep 30

#       - name: 🛠 Test if app is running
#         run: curl --fail http://localhost:8082/api/hello || exit 1

#   deploy:
#     name: 🚀 Deploy to Vercel
#     runs-on: ubuntu-latest
#     needs: start-app
#     if: github.ref == 'refs/heads/main'

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: ⚡ Install Vercel CLI
#         run: npm install -g vercel

#     #   - name: 🚀 Deploy to Vercel
#     #     run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}


# name: 🚀 CI/CD - Loto Tracker API (Docker)

# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main
#       - develop

# jobs:
#   build:
#     name: 🏗 Build & Test API (Docker)
#     runs-on: ubuntu-latest

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # - name: 🔧 Install Docker and Docker Compose
#       #   run: |
#       #     sudo apt update
#       #     sudo apt install -y docker.io docker-compose
#       #     sudo systemctl start docker
#       #     docker --version
#       #     docker-compose --version

#       - name: 🔧 Install Docker and Docker Compose
#         run: |
#           sudo apt update
#           sudo apt install -y ca-certificates curl gnupg

#           # Ajouter la clé GPG officielle de Docker
#           sudo install -m 0755 -d /etc/apt/keyrings
#           curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
#           sudo chmod a+r /etc/apt/keyrings/docker.asc

#           # Ajouter le dépôt Docker officiel
#           echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

#           sudo apt update
#           sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

#           # Vérifier les installations
#           docker --version
#           docker compose version


#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'
#           cache: 'maven'

#       - name: 🐳 Start Docker Containers (MySQL & MongoDB)
#         run: docker compose up -d --build # ⚠️ Note : "docker compose" sans tiret depuis v2 et non plus docker-compose

#       - name: ⏳ Wait for services to be ready
#         run: |
#           echo "Waiting for services to start..."
#           sleep 30  # Ajuste en fonction du temps de démarrage

#       - name: 📦 Build with Maven (install dependencies)
#         run: mvn clean install -DskipTests

#       - name: 🧪 Run Tests
#         run: mvn test

#       - name: 🛑 Stop & Clean Docker Containers
#         run: docker compose down -v

#   start-app:
#     name: 🚀 Start Spring Boot App
#     runs-on: ubuntu-latest
#     needs: build
#     if: github.ref == 'refs/heads/main'

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'

#       - name: 🚀 Run Spring Boot Application
#         run: mvn spring-boot:run &
#         env:
#           SPRING_PROFILES_ACTIVE: developpement

#       - name: 🛑 Wait for app to start (timeout 30s)
#         run: sleep 30

#       - name: 🛠 Test if app is running
#         run: curl --fail http://localhost:8082/api/hello || exit 1

#   deploy:
#     name: 🚀 Deploy to Vercel
#     runs-on: ubuntu-latest
#     needs: start-app
#     if: github.ref == 'refs/heads/main'

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: ⚡ Install Vercel CLI
#         run: npm install -g vercel


# name: 🚀 CI/CD - Loto Tracker API (Test run Docker / Test install and run Spring-boot)

# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main
#       - develop

# jobs:
#   build:
#     name: 🏗 Build & Test API (Docker)
#     runs-on: ubuntu-latest

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # Installer Docker et Docker Compose
#       - name: 🔧 Install Docker and Docker Compose
#         run: |
#           sudo apt update
#           sudo apt install -y ca-certificates curl gnupg

#           # Ajouter la clé GPG officielle de Docker
#           sudo install -m 0755 -d /etc/apt/keyrings
#           curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
#           sudo chmod a+r /etc/apt/keyrings/docker.asc

#           # Ajouter le dépôt Docker officiel
#           echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

#           sudo apt update
#           sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

#           # Vérifier les installations
#           docker --version
#           docker compose version

#       # Configurer JDK 21 pour Maven
#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'
#           cache: 'maven'

#       # Démarrer les conteneurs Docker pour MySQL et MongoDB
#       - name: 🐳 Start Docker Containers (MySQL & MongoDB)
#         run: docker compose up -d --build  # Note: "docker compose" sans tiret

#       # Attendre que les services soient prêts
#       - name: ⏳ Wait for services to be ready
#         run: |
#           echo "Waiting for services to start..."
#           sleep 30  # Ajuste en fonction du temps de démarrage

#       # Construire le projet avec Maven sans exécuter les tests
#       - name: 📦 Build with Maven (install dependencies)
#         run: mvn clean install -DskipTests

#       # Exécuter les tests
#       - name: 🧪 Run Tests
#         run: mvn test

#       # Arrêter et nettoyer les conteneurs Docker
#       - name: 🛑 Stop & Clean Docker Containers
#         run: docker compose down -v

#   start-app:
#     name: 🚀 Start Spring Boot App
#     runs-on: ubuntu-latest
#     needs: build
#     if: github.ref == 'refs/heads/main'

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # Configurer JDK 21 pour Maven
#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'

#       # Lancer l'application Spring Boot
#       - name: 🚀 Run Spring Boot Application
#         run: mvn spring-boot:run &
#         env:
#           SPRING_PROFILES_ACTIVE: developpement

#       # Attendre que l'application démarre
#       - name: 🛑 Wait for app to start (timeout 30s)
#         run: sleep 30

#       # Tester si l'API fonctionne
#       - name: 🛠 Test if app is running
#         run: curl --fail http://localhost:8082/api/hello || exit 1

#   deploy:
#     name: 🚀 Deploy to Vercel
#     runs-on: ubuntu-latest
#     needs: start-app
#     if: github.ref == 'refs/heads/main'

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # Installer le CLI Vercel
#       - name: ⚡ Install Vercel CLI
#         run: npm install -g vercel


# name: 🚀 CI/CD - Loto Tracker API (Test run Docker / Test install and run Spring-boot)

# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main
#       - develop

# jobs:
#   build:
#     name: 🏗 Build & Test API (Docker)
#     runs-on: ubuntu-latest

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # Installer Docker et Docker Compose
#       - name: 🔧 Install Docker and Docker Compose
#         run: |
#           sudo apt update
#           sudo apt install -y ca-certificates curl gnupg

#           # Ajouter la clé GPG officielle de Docker
#           sudo install -m 0755 -d /etc/apt/keyrings
#           curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
#           sudo chmod a+r /etc/apt/keyrings/docker.asc

#           # Ajouter le dépôt Docker officiel
#           echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

#           sudo apt update
#           sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

#           # Vérifier les installations
#           docker --version
#           docker compose version

#       # Configurer JDK 21 pour Maven
#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'
#           cache: 'maven'

#       # Démarrer les conteneurs Docker pour MySQL et MongoDB
#       - name: 🐳 Start Docker Containers (MySQL, MongoDB, API)
#         run: docker compose up -d --build

#       # Attendre le démarrage de l'API avec Swagger
#       - name: ⏳ Wait for API & Swagger UI to be ready
#         run: |
#           echo "Waiting for API..."
#           until curl --output /dev/null --silent --head --fail http://localhost:8082/swagger-ui.html; do
#             printf '.'
#             sleep 5
#           done
#           echo "✅ Swagger UI is ready at http://localhost:8082/swagger-ui.html"

#       # Construire le projet avec Maven sans exécuter les tests
#       - name: 📦 Build with Maven (install dependencies)
#         run: mvn clean install -DskipTests

#       # Exécuter les tests
#       - name: 🧪 Run Tests
#         run: mvn test

#       # Arrêter et nettoyer les conteneurs Docker
#       - name: 🛑 Stop & Clean Docker Containers
#         run: docker compose down -v

#   deploy:
#     name: 🚀 Deploy to Vercel
#     runs-on: ubuntu-latest
#     needs: build
#     if: github.ref == 'refs/heads/main'

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # Installer le CLI Vercel
#       - name: ⚡ Install Vercel CLI
#         run: npm install -g vercel

#       # Déployer l'API et Swagger UI sur Vercel
#       - name: 🚀 Deploy Swagger UI on Vercel
#         # run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}

# *********************************************fonctionne************************************************
# name: 🚀 CI/CD - Loto Tracker API (Test run Docker / Test install and run Spring-boot)

# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main
#       - develop

# jobs:
#   build:
#     name: 🏗 Build & Test API (Docker)
#     runs-on: ubuntu-latest

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # Installer Docker et Docker Compose
#       - name: 🔧 Install Docker and Docker Compose
#         run: |
#           sudo apt update
#           sudo apt install -y ca-certificates curl gnupg

#           # Ajouter la clé GPG officielle de Docker
#           sudo install -m 0755 -d /etc/apt/keyrings
#           curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
#           sudo chmod a+r /etc/apt/keyrings/docker.asc

#           # Ajouter le dépôt Docker officiel
#           echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

#           sudo apt update
#           sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

#           # Vérifier les installations
#           docker --version
#           docker compose version

#       # Configurer JDK 21 pour Maven
#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'
#           cache: 'maven'

#       # Démarrer les conteneurs Docker pour MySQL et MongoDB
#       - name: 🐳 Start Docker Containers (MySQL & MongoDB)
#         run: docker compose up -d --build  # Note: "docker compose" sans tiret

#       # Attendre que les services soient prêts
#       - name: ⏳ Wait for services to be ready
#         run: |
#           echo "Waiting for services to start..."
#           sleep 30  # Ajuste en fonction du temps de démarrage

#       # Construire le projet avec Maven sans exécuter les tests
#       - name: 📦 Build with Maven (install dependencies)
#         run: mvn clean install -DskipTests

#       # Exécuter les tests
#       - name: 🧪 Run Tests
#         run: mvn test

#       # Arrêter et nettoyer les conteneurs Docker
#       - name: 🛑 Stop & Clean Docker Containers
#         run: docker compose down -v

#   start-app:
#     name: 🚀 Start Spring Boot App
#     runs-on: ubuntu-latest
#     needs: build
#     if: github.ref == 'refs/heads/main'

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # Configurer JDK 21 pour Maven
#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'

#       # Lancer l'application Spring Boot
#       - name: 🚀 Run Spring Boot Application
#         run: mvn spring-boot:run &
#         env:
#           SPRING_PROFILES_ACTIVE: developpement

#       # Attendre que l'application démarre
#       - name: 🛑 Wait for app to start (timeout 30s)
#         run: sleep 30

#       # Tester si l'API fonctionne
#       - name: 🛠 Test if app is running
#         run: curl --fail http://localhost:8082/api/hello || exit 1

#   deploy:
#     name: 🚀 Deploy to Vercel
#     runs-on: ubuntu-latest
#     needs: start-app
#     if: github.ref == 'refs/heads/main'

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # Installer le CLI Vercel
#       - name: ⚡ Install Vercel CLI
#         run: npm install -g vercel


# name: 🚀 CI/CD - Loto Tracker API (Install and run springboot / Integration Tests with Docker, MongoDB, and SQLite)

# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main
#       - develop

# jobs:
#   build:
#     name: 🏗 Build API with Maven (before Docker)
#     runs-on: ubuntu-latest

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # Installer JDK 21 pour Maven
#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'
#           cache: 'maven'

#       # Construire le projet avec Maven avant Docker
#       - name: 📦 Build with Maven (install dependencies)
#         run: mvn clean install -DskipTests

#       # Exécuter les tests unitaires Maven avant Docker
#       - name: 🧪 Run Unit Tests with Maven
#         run: mvn test

#   test-integration:
#     name: 🐳 Docker & Integration Tests
#     runs-on: ubuntu-latest
#     needs: build

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # Installer Docker et Docker Compose
#       - name: 🔧 Install Docker and Docker Compose
#         run: |
#           sudo apt update
#           sudo apt install -y ca-certificates curl gnupg

#           # Ajouter la clé GPG officielle de Docker
#           sudo install -m 0755 -d /etc/apt/keyrings
#           curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
#           sudo chmod a+r /etc/apt/keyrings/docker.asc

#           # Ajouter le dépôt Docker officiel
#           echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

#           sudo apt update
#           sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

#           # Vérifier les installations
#           docker --version
#           docker compose version

#       # Démarrer les conteneurs Docker (MySQL, MongoDB, API)
#       - name: 🐳 Start Docker Containers (MySQL, SQLite & MongoDB)
#         run: docker compose up -d --build

#       # Attendre le démarrage de l’API
#       - name: ⏳ Wait for API & Swagger UI to be ready
#         run: |
#           echo "Waiting for API..."
#           until curl --output /dev/null --silent --head --fail http://localhost:8082/swagger-ui.html; do
#             printf '.'
#             sleep 5
#           done
#           echo "✅ API is ready!"

#       # 🔑 Authentification - Tester le login et récupérer le token JWT
#       - name: 🔑 Login User & Retrieve JWT Token (login3)
#         id: login
#         run: |
#           JWT_TOKEN=$(curl -X POST "http://localhost:8082/api/auth/login3" \
#             -H "Content-Type: application/json" \
#             -d '{"email":"test4@hbnb.com","password":"user1234"}' \
#             -c cookies.txt | jq -r '.token')

#           if [ -z "$JWT_TOKEN" ]; then
#             echo "❌ Login failed!"
#             exit 1
#           fi

#           echo "✅ JWT Token retrieved!"
#           echo "::set-output name=jwt_token::$JWT_TOKEN"

#       # 🎫 Tester la soumission d’un ticket avec JWT
#       - name: 🎫 Create Ticket
#         run: |
#           curl -X POST "http://localhost:8082/api/tickets" \
#             -H "Content-Type: application/json" \
#             -H "Authorization: Bearer ${{ steps.login.outputs.jwt_token }}" \
#             -d '{"numbers":[1,2,3,4,5],"luckyNumber":6}', "drawDate":"2025-03-12" \
#             -b cookies.txt

#       # 🔄 Scraping des résultats FDJ via le service Spring Boot
#       - name: 🔄 Run Loto Scraper
#         run: |
#           curl -X GET "http://localhost:8082/api/loto/scrape"

#       # 🏆 Calcul automatique des gains via l’API
#       - name: 🏆 Calculate Ticket Winnings
#         run: |
#           curl -X GET "http://localhost:8082/api/gains/calculate"

#       # 📅 Vérifier les tirages disponibles
#       - name: 🔍 Get Available Draw Dates
#         run: |
#           curl -X GET "http://localhost:8082/api/tirages/dates"

#       # 📜 Vérifier l'historique des résultats
#       - name: 📜 Get Last 20 Lottery Results
#         run: |
#           curl -X GET "http://localhost:8082/api/historique/last20"

#       # 🔒 Tester un endpoint protégé avec JWT
#       - name: 🔒 Get Authenticated User Info
#         run: |
#           curl -X GET "http://localhost:8082/api/auth/me" \
#             -H "Authorization: Bearer ${{ steps.login.outputs.jwt_token }}" \
#             -b cookies.txt

#       # 🏷 Vérifier le ticket soumis
#       - name: 📑 Get Ticket Info
#         run: |
#           curl -X GET "http://localhost:8082/api/tickets"

#       # Arrêter et nettoyer les conteneurs Docker
#       - name: 🛑 Stop & Clean Docker Containers
#         run: docker compose down -v

#   deploy:
#     name: 🚀 Deploy to Vercel
#     runs-on: ubuntu-latest
#     needs: test-integration

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # Installer le CLI Vercel
#       - name: ⚡ Install Vercel CLI
#         run: npm install -g vercel

#       # Déployer l'API et Swagger UI sur Vercel
#       - name: 🚀 Deploy Swagger UI on Vercel
#         # run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}

# name: 🚀 CI/CD - Loto Tracker API (Install and run Spring Boot / Integration Tests with Docker, MongoDB, and SQLite)

# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main
#       - develop

# jobs:
#   build:
#     name: 🏗 Build API with Maven (before Docker)
#     runs-on: ubuntu-latest

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # Installer JDK 21 pour Maven
#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'
#           cache: 'maven'

#       # Construire le projet avec Maven avant Docker
#       - name: 📦 Build with Maven (install dependencies)
#         run: mvn clean install -DskipTests

#       # Exécuter les tests unitaires Maven avant Docker
#       - name: 🧪 Run Unit Tests with Maven
#         run: mvn test

#   test-integration:
#     name: 🐳 Docker & Integration Tests
#     runs-on: ubuntu-latest
#     needs: build

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # Installer Docker et Docker Compose
#       - name: 🔧 Install Docker and Docker Compose
#         run: |
#           sudo apt update
#           sudo apt install -y ca-certificates curl gnupg
#           sudo install -m 0755 -d /etc/apt/keyrings
#           curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
#           sudo chmod a+r /etc/apt/keyrings/docker.asc
#           echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#           sudo apt update
#           sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
#           docker --version
#           docker compose version

#       # Démarrer les conteneurs Docker (MySQL, SQLite & MongoDB)
#       - name: 🐳 Start Docker Containers (MySQL, SQLite & MongoDB)
#         run: docker compose up -d --build

#       # Attendre que l’API soit prête (Swagger UI & Health Check)
#       - name: ⏳ Wait for API & Swagger UI to be ready
#         run: |
#           echo "Waiting for API..."
#           until curl --output /dev/null --silent --head --fail http://localhost:8082/api/hello; do
#             printf '.'
#             sleep 5
#           done
#           echo "✅ API is ready!"

#       # 🔑 Authentification - Tester le login et récupérer le token JWT
#       - name: 🔑 Login User & Retrieve JWT Token (login3)
#         id: login
#         run: |
#           JWT_TOKEN=$(curl -X POST "http://localhost:8082/api/auth/login3" \
#             -H "Content-Type: application/json" \
#             -d '{"email":"test4@hbnb.com","password":"user1234"}' \
#             -c cookies.txt | jq -r '.token')

#           if [ -z "$JWT_TOKEN" ]; then
#             echo "❌ Login failed!"
#             exit 1
#           fi

#           echo "✅ JWT Token retrieved!"
#           echo "::set-output name=jwt_token::$JWT_TOKEN"

#       # 🎫 Tester la soumission d’un ticket avec JWT
#       - name: 🎫 Create Ticket
#         run: |
#           curl -X POST "http://localhost:8082/api/tickets" \
#             -H "Content-Type: application/json" \
#             -H "Authorization: Bearer ${{ steps.login.outputs.jwt_token }}" \
#             -d '{"numbers":[1,2,3,4,5],"luckyNumber":6, "drawDate":"2025-03-12"}' \
#             -b cookies.txt

#       # 🔄 Scraping des résultats FDJ via le service Spring Boot
#       - name: 🔄 Run Loto Scraper
#         run: |
#           curl -X GET "http://localhost:8082/api/loto/scrape"

#       # 🏆 Calcul automatique des gains via l’API
#       - name: 🏆 Calculate Ticket Winnings
#         run: |
#           curl -X GET "http://localhost:8082/api/gains/calculate"

#       # 📅 Vérifier les tirages disponibles
#       - name: 🔍 Get Available Draw Dates
#         run: |
#           curl -X GET "http://localhost:8082/api/tirages/dates"

#       # 📜 Vérifier l'historique des résultats
#       - name: 📜 Get Last 20 Lottery Results
#         run: |
#           curl -X GET "http://localhost:8082/api/historique/last20"

#       # 🔒 Tester un endpoint protégé avec JWT
#       - name: 🔒 Get Authenticated User Info
#         run: |
#           curl -X GET "http://localhost:8082/api/auth/me" \
#             -H "Authorization: Bearer ${{ steps.login.outputs.jwt_token }}" \
#             -b cookies.txt

#       # 🏷 Vérifier le ticket soumis
#       - name: 📑 Get Ticket Info
#         run: |
#           curl -X GET "http://localhost:8082/api/tickets"

#       # Arrêter et nettoyer les conteneurs Docker
#       - name: 🛑 Stop & Clean Docker Containers
#         run: docker compose down -v

#   deploy:
#     name: 🚀 Deploy to Vercel
#     runs-on: ubuntu-latest
#     needs: test-integration

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # Installer le CLI Vercel
#       - name: ⚡ Install Vercel CLI
#         run: npm install -g vercel

#       # Déployer l'API et Swagger UI sur Vercel
#       # - name: 🚀 Deploy Swagger UI on Vercel
#         # run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}


# name: 🚀 CI/CD - Loto Tracker API (Install and run Spring Boot / Integration Tests with Docker, MongoDB, and SQLite)

# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main
#       - develop

# jobs:
#   build:
#     name: 🏗 Build API with Maven (before Docker)
#     runs-on: ubuntu-latest

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # Installer JDK 21 pour Maven
#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'
#           cache: 'maven'

#       # Construire le projet avec Maven avant Docker
#       - name: 📦 Build with Maven (install dependencies)
#         # run: mvn clean install -DskipTests
#         run: mvn clean install

#       # Exécuter les tests unitaires Maven avant Docker
#       - name: 🧪 Run Unit Tests with Maven
#         run: mvn test

#       - name: 📦 Run Maven (run)
#         # run: mvn clean install -DskipTests
#         run: mvn sprin-boot:run

#   test-integration:
#     name: 🐳 Docker & Integration Tests
#     runs-on: ubuntu-latest
#     needs: build

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # Installer Docker et Docker Compose
#       - name: 🔧 Install Docker and Docker Compose
#         run: |
#           sudo apt update
#           sudo apt install -y ca-certificates curl gnupg
#           sudo install -m 0755 -d /etc/apt/keyrings
#           curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
#           sudo chmod a+r /etc/apt/keyrings/docker.asc
#           echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#           sudo apt update
#           sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
#           docker --version
#           docker compose version

#       # Démarrer les conteneurs Docker (MySQL, SQLite & MongoDB)
#       - name: 🐳 Start Docker Containers (MySQL, SQLite & MongoDB)
#         run: docker compose up -d --build


#       # Attendre que l’API soit prête (Swagger UI & Health Check)
#       - name: ⏳ Wait for API & Swagger UI to be ready
#         run: |
#           echo "Waiting for API..."
#           until curl --output /dev/null --silent --head --fail http://localhost:8082/api/hello; do
#             printf '.'
#             sleep 5
#           done
#           echo "✅ API is ready!"

#       # 🔑 Authentification - Tester le login et récupérer le token JWT
#       - name: 🔑 Login User & Retrieve JWT Token (login3)
#         id: login
#         run: |
#           JWT_TOKEN=$(curl -s -X POST "http://localhost:8082/api/auth/login3" \
#             -H "Content-Type: application/json" \
#             -d '{"email":"test4@hbnb.com","password":"user1234"}' \
#             -c cookies.txt | jq -r '.token')

#           if [ -z "$JWT_TOKEN" ]; then
#             echo "❌ Login failed!"
#             exit 1
#           fi

#           echo "✅ JWT Token retrieved!"
#           echo "JWT_TOKEN=$JWT_TOKEN" >> $GITHUB_ENV



#       # 🎫 Tester la soumission d’un ticket avec JWT
#       - name: 🎫 Create Ticket
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X POST "http://localhost:8082/api/tickets" \
#             -H "Content-Type: application/json" \
#             -H "Authorization: Bearer $JWT_TOKEN" \
#             -d '{"numbers":[1,2,3,4,5],"luckyNumber":6, "drawDate":"2025-03-12"}' \
#             -b cookies.txt)

#           if [ "$response" -eq 201 ]; then
#             echo "✅ Ticket successfully created!"
#           else
#             echo "❌ Failed to create ticket. HTTP Code: $response"
#             exit 1
#           fi


#       # 🔄 Scraping des résultats FDJ via le service Spring Boot
#       - name: 🔄 Run Loto Scraper
#         run: |
#           response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8082/api/loto/scrape")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Scraping successfully started!"
#           else
#             echo "❌ Scraping failed. HTTP Code: $response"
#             exit 1
#           fi

#       # 🏆 Calcul automatique des gains via l’API
#       - name: 🏆 Calculate Ticket Winnings
#         run: |
#           response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8082/api/gains/calculate")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Ticket winnings calculated!"
#           else
#             echo "❌ Ticket winnings calculation failed. HTTP Code: $response"
#             exit 1
#           fi

#       # 📅 Vérifier les tirages disponibles
#       - name: 🔍 Get Available Draw Dates
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/tirages/dates")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Available draw dates retrieved!"
#           else
#             echo "❌ Failed to retrieve draw dates. HTTP Code: $response"
#             exit 1
#           fi

#       # 📜 Vérifier l'historique des résultats
#       - name: 📜 Get Last 20 Lottery Results
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/historique/last20")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Last 20 lottery results retrieved!"
#           else
#             echo "❌ Failed to retrieve lottery results. HTTP Code: $response"
#             exit 1
#           fi

#       # 🔒 Tester un endpoint protégé avec JWT
#       - name: 🔒 Get Authenticated User Info
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/auth/me" \
#             -H "Authorization: Bearer $JWT_TOKEN" \
#             -b cookies.txt)

#           if [ "$response" -eq 200 ]; then
#             echo "✅ Authenticated user info retrieved!"
#           else
#             echo "❌ Failed to retrieve authenticated user info. HTTP Code: $response"
#             exit 1
#           fi


#       # 🏷 Vérifier le ticket soumis
#       - name: 📑 Get Ticket Info
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/tickets")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Ticket info retrieved!"
#           else
#             echo "❌ Failed to retrieve ticket info. HTTP Code: $response"
#             exit 1
#           fi


#       # Arrêter et nettoyer les conteneurs Docker
#       - name: 🛑 Stop & Clean Docker Containers
#         run: docker compose down -v

#   deploy:
#     name: 🚀 Deploy to Vercel
#     runs-on: ubuntu-latest
#     needs: test-integration

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # Installer le CLI Vercel
#       - name: ⚡ Install Vercel CLI
#         run: npm install -g vercel

#       # Déployer l'API et Swagger UI sur Vercel
#       # - name: 🚀 Deploy Swagger UI on Vercel
#         # run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}


# name: 🚀 CI/CD - Loto Tracker API (Install and run Spring Boot / Integration Tests with Docker, MongoDB, and SQLite)

# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main
#       - develop

# jobs:
#   build:
#     name: 🏗 Build API with Maven (before Docker)
#     runs-on: ubuntu-latest

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # Installer JDK 21 pour Maven
#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'
#           cache: 'maven'

#       # Construire le projet avec Maven avant Docker
#       - name: 📦 Build with Maven (install dependencies)
#         # run: mvn clean install -DskipTests
#         run: mvn clean install

#       # Exécuter les tests unitaires Maven avant Docker
#       - name: 🧪 Run Unit Tests with Maven
#         run: mvn test

#       # - name: 📦 Run Maven (run)
#       #   # run: mvn clean install -DskipTests
#       #   run: mvn spring-boot:run

#   test-integration:
#     name: 🐳 Docker & Integration Tests
#     runs-on: ubuntu-latest
#     needs: build

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # Installer Docker et Docker Compose
#       - name: 🔧 Install Docker and Docker Compose
#         run: |
#           sudo apt update
#           sudo apt install -y ca-certificates curl gnupg
#           sudo install -m 0755 -d /etc/apt/keyrings
#           curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
#           sudo chmod a+r /etc/apt/keyrings/docker.asc
#           echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#           sudo apt update
#           sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
#           docker --version
#           docker compose version

#       # Démarrer les conteneurs Docker (MySQL, SQLite & MongoDB)
#       - name: 🐳 Start Docker Containers (MySQL, SQLite & MongoDB)
#         run: docker compose up -d --build


#       # Attendre que l’API soit prête (Swagger UI & Health Check)
#       - name: ⏳ Wait for API & Swagger UI to be ready
#         run: |
#           echo "Waiting for API..."
#           until curl --output /dev/null --silent --head --fail http://localhost:8082/api/hello; do
#             printf '.'
#             sleep 5
#           done
#           echo "✅ API is ready!"

#       # 🔑 Authentification - Tester le login et récupérer le token JWT
#       - name: 🔑 Login User & Retrieve JWT Token (login3)
#         id: login
#         run: |
#           JWT_TOKEN=$(curl -s -X POST "http://localhost:8082/api/auth/login3" \
#             -H "Content-Type: application/json" \
#             -d '{"email":"test4@hbnb.com","password":"user1234"}' \
#             -c cookies.txt | jq -r '.token')

#           if [ -z "$JWT_TOKEN" ]; then
#             echo "❌ Login failed!"
#             exit 1
#           fi

#           echo "✅ JWT Token retrieved!"
#           echo "JWT_TOKEN=$JWT_TOKEN" >> $GITHUB_ENV

#       - name: 🔍 Display JWT Token (Debug)
#         run: |
#           echo "🔍 JWT Token: $JWT_TOKEN"






#       # 🎫 Tester la soumission d’un ticket avec JWT
#       - name: 🎫 Create Ticket
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X POST "http://localhost:8082/api/tickets" \
#             -H "Content-Type: application/json" \
#             -H "Authorization: Bearer $JWT_TOKEN" \
#             -d '{"numbers":[1,2,3,4,5],"luckyNumber":6, "drawDate":"2025-03-12"}' \
#             -b cookies.txt)

#           if [ "$response" -eq 201 ]; then
#             echo "✅ Ticket successfully created!"
#           else
#             echo "❌ Failed to create ticket. HTTP Code: $response"
#             exit 1
#           fi



#       # 🔄 Scraping des résultats FDJ via le service Spring Boot
#       - name: 🔄 Run Loto Scraper
#         run: |
#           response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8082/api/loto/scrape")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Scraping successfully started!"
#           else
#             echo "❌ Scraping failed. HTTP Code: $response"
#             exit 1
#           fi

#       # 🏆 Calcul automatique des gains via l’API
#       - name: 🏆 Calculate Ticket Winnings
#         run: |
#           response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8082/api/gains/calculate")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Ticket winnings calculated!"
#           else
#             echo "❌ Ticket winnings calculation failed. HTTP Code: $response"
#             exit 1
#           fi

#       # 📅 Vérifier les tirages disponibles
#       - name: 🔍 Get Available Draw Dates
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/tirages/dates")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Available draw dates retrieved!"
#           else
#             echo "❌ Failed to retrieve draw dates. HTTP Code: $response"
#             exit 1
#           fi

#       # 📜 Vérifier l'historique des résultats
#       - name: 📜 Get Last 20 Lottery Results
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/historique/last20")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Last 20 lottery results retrieved!"
#           else
#             echo "❌ Failed to retrieve lottery results. HTTP Code: $response"
#             exit 1
#           fi

#       # 🔒 Tester un endpoint protégé avec JWT
#       - name: 🔒 Get Authenticated User Info
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/auth/me" \
#             -H "Authorization: Bearer $JWT_TOKEN" \
#             -b cookies.txt)

#           if [ "$response" -eq 200 ]; then
#             echo "✅ Authenticated user info retrieved!"
#           else
#             echo "❌ Failed to retrieve authenticated user info. HTTP Code: $response"
#             exit 1
#           fi


#       # 🏷 Vérifier le ticket soumis
#       - name: 📑 Get Ticket Info
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/tickets")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Ticket info retrieved!"
#           else
#             echo "❌ Failed to retrieve ticket info. HTTP Code: $response"
#             exit 1
#           fi


#       # Arrêter et nettoyer les conteneurs Docker
#       - name: 🛑 Stop & Clean Docker Containers
#         run: docker compose down -v

#   deploy:
#     name: 🚀 Deploy to Vercel
#     runs-on: ubuntu-latest
#     needs: test-integration

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # Installer le CLI Vercel
#       - name: ⚡ Install Vercel CLI
#         run: npm install -g vercel

#       # Déployer l'API et Swagger UI sur Vercel
#       # - name: 🚀 Deploy Swagger UI on Vercel
#         # run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}

# name: 🚀 CI/CD - Loto Tracker API (Install and run Spring Boot / Integration Tests with Docker, MongoDB, and SQLite)

# on:
#   push:
#     branches:
#       - main
#       - develop
#       - '**'  # Exécute sur toutes les branches
#   pull_request:
#     branches:
#       - main
#       - develop
#       - '**'  # Exécute sur toutes les branches

# jobs:
#   build:
#     name: 🏗 Build API with Maven (before Docker)
#     runs-on: ubuntu-latest

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'
#           cache: 'maven'

#       - name: 📦 Build with Maven (install dependencies)
#         run: mvn clean install

#       - name: 🧪 Run Unit Tests with Maven
#         run: mvn test

#   test-integration:
#     name: 🐳 Docker & Integration Tests
#     runs-on: ubuntu-latest
#     needs: build

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔧 Install Docker and Docker Compose
#         run: |
#           sudo apt update
#           sudo apt install -y ca-certificates curl gnupg
#           sudo install -m 0755 -d /etc/apt/keyrings
#           curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
#           sudo chmod a+r /etc/apt/keyrings/docker.asc
#           echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#           sudo apt update
#           sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
#           docker --version
#           docker compose version

#       - name: 🐳 Start Docker Containers (MySQL, SQLite & MongoDB)
#         run: docker compose up -d --build

#       - name: ⏳ Wait for API & Swagger UI to be ready
#         run: |
#           echo "Waiting for API..."
#           until curl --output /dev/null --silent --head --fail http://localhost:8082/api/hello; do
#             printf '.'
#             sleep 5
#           done
#           echo "✅ API is ready!"

#       - name: 🔑 Login User & Retrieve JWT Token (login3)
#         id: login
#         run: |
#           JWT_TOKEN=$(curl -s -X POST "http://localhost:8082/api/auth/login3" \
#             -H "Content-Type: application/json" \
#             -d '{"email":"test4@hbnb.com","password":"user1234"}' \
#             -c cookies.txt | jq -r '.token')

#           if [ -z "$JWT_TOKEN" ]; then
#             echo "❌ Login failed!"
#             exit 1
#           fi

#           echo "✅ JWT Token retrieved!"
#           echo "JWT_TOKEN=$JWT_TOKEN" >> $GITHUB_ENV
#           echo "::add-mask::$JWT_TOKEN"  # Masquer le token dans les logs GitHub Actions

#       - name: 🔍 Display JWT Token (Debug)
#         run: |
#           echo "🔍 JWT Token retrieved successfully!"

#       - name: 🎫 Create Ticket
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X POST "http://localhost:8082/api/tickets" \
#             -H "Content-Type: application/json" \
#             -H "Authorization: Bearer ${{ env.JWT_TOKEN }}" \
#             -d '{"numbers":[1,2,3,4,5],"luckyNumber":6, "drawDate":"2025-03-12"}' \
#             -b cookies.txt)

#           cat response.json  # Debug: afficher la réponse JSON reçue

#           if [ "$response" -eq 201 ]; then
#             echo "✅ Ticket successfully created!"
#           else
#             echo "❌ Failed to create ticket. HTTP Code: $response"
#             exit 1
#           fi

#       - name: 🔄 Run Loto Scraper
#         run: |
#           response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8082/api/loto/scrape")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Scraping successfully started!"
#           else
#             echo "❌ Scraping failed. HTTP Code: $response"
#             exit 1
#           fi

#       - name: 🏆 Calculate Ticket Winnings
#         run: |
#           response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8082/api/gains/calculate")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Ticket winnings calculated!"
#           else
#             echo "❌ Ticket winnings calculation failed. HTTP Code: $response"
#             exit 1
#           fi

#       - name: 📑 Get Ticket Info
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/tickets")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Ticket info retrieved!"
#           else
#             echo "❌ Failed to retrieve ticket info. HTTP Code: $response"
#             exit 1
#           fi

#       - name: 🛑 Stop & Clean Docker Containers
#         run: docker compose down -v

#   deploy:
#     name: 🚀 Deploy to Vercel
#     runs-on: ubuntu-latest
#     needs: test-integration

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: ⚡ Install Vercel CLI
#         run: npm install -g vercel

#       # Déployer sur Vercel
#       # - name: 🚀 Deploy to Vercel
#         # run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}


#********************************************************************************************
# name: 🚀 CI/CD - Loto Tracker API (Install and run Spring Boot / Integration Tests with Docker, MongoDB, and SQLite)

# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main
#       - develop

# jobs:
#   build:
#     name: 🏗 Build API with Maven (before Docker)
#     runs-on: ubuntu-latest

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'
#           cache: 'maven'

#       - name: 📦 Build with Maven (install dependencies)
#         run: mvn clean install

#       - name: 🧪 Run Unit Tests with Maven
#         run: mvn test

#   test-integration:
#     name: 🐳 Docker & Integration Tests
#     runs-on: ubuntu-latest
#     needs: build

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔧 Install Docker and Docker Compose
#         run: |
#           sudo apt update
#           sudo apt install -y ca-certificates curl gnupg
#           sudo install -m 0755 -d /etc/apt/keyrings
#           curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
#           sudo chmod a+r /etc/apt/keyrings/docker.asc
#           echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#           sudo apt update
#           sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
#           docker --version
#           docker compose version

#       - name: 🐳 Start Docker Containers (MySQL, SQLite & MongoDB)
#         run: docker compose up -d --build

#       # ⏳ Wait for API & Swagger UI to be ready
#       - name: ⏳ Wait for API & Swagger UI to be ready
#         run: |
#           echo "Waiting for API..."
#           until curl --output /dev/null --silent --head --fail http://localhost:8082/api/hello; do
#             printf '.'
#             sleep 5
#           done
#           echo "✅ API is ready!"

#       # 🔑 Authentification - Tester le login et récupérer le token JWT
#       - name: 🔑 Login User & Retrieve JWT Token (login3)
#         id: login
#         run: |
#           JWT_TOKEN=$(curl -X POST "http://localhost:8082/api/auth/login3" \
#             -H "Content-Type: application/json" \
#             -d '{"email":"test4@hbnb.com","password":"user1234"}' \
#             -c cookies.txt | jq -r '.token')

#           if [ -z "$JWT_TOKEN" ]; then
#             echo "❌ Login failed!"
#             exit 1
#           fi

#           echo "✅ JWT Token retrieved!"
#           echo "::set-output name=jwt_token::$JWT_TOKEN"

#       # 🎫 Tester la soumission d’un ticket avec JWT
#       - name: 🎫 Create Ticket
#         run: |
#           curl -X POST "http://localhost:8082/api/tickets" \
#             -H "Content-Type: application/json" \
#             -H "Authorization: Bearer ${{ steps.login.outputs.jwt_token }}" \
#             -d '{"numbers":[1,2,3,4,5],"luckyNumber":6, "drawDate":"2025-03-12"}' \
#             -b cookies.txt

#       # 🔄 Scraping des résultats FDJ via le service Spring Boot
#       - name: 🔄 Run Loto Scraper
#         run: |
#           curl -X GET "http://localhost:8082/api/loto/scrape"

#       # 🏆 Calcul automatique des gains via l’API
#       - name: 🏆 Calculate Ticket Winnings
#         run: |
#           curl -X GET "http://localhost:8082/api/gains/calculate"

# #       # 📅 Vérifier les tirages disponibles
# #       - name: 🔍 Get Available Draw Dates
# #         run: |
# #           curl -X GET "http://localhost:8082/api/tirages/dates"

# #       # 📜 Vérifier l'historique des résultats
# #       - name: 📜 Get Last 20 Lottery Results
# #         run: |
# #           curl -X GET "http://localhost:8082/api/historique/last20"

# #       # 🔒 Tester un endpoint protégé avec JWT
# #       - name: 🔒 Get Authenticated User Info
# #         run: |
# #           curl -X GET "http://localhost:8082/api/auth/me" \
# #             -H "Authorization: Bearer ${{ steps.login.outputs.jwt_token }}" \
# #             -b cookies.txt

# #       # 🏷 Vérifier le ticket soumis
# #       - name: 📑 Get Ticket Info
# #         run: |
# #           curl -X GET "http://localhost:8082/api/tickets"

#       # - name: ⏳ Wait for API & Swagger UI to be ready
#       #   run: |
#       #     echo "Waiting for API..."
#       #     until curl --output /dev/null --silent --head --fail http://localhost:8082/api/hello; do
#       #       printf '.'
#       #       sleep 5
#       #     done
#       #     echo "✅ API is ready!"

#       # - name: 🔑 Login User & Retrieve JWT Token
#       #   id: login
#       #   run: |
#       #     response=$(curl -s -X POST "http://localhost:8082/api/auth/login3" \
#       #       -H "Content-Type: application/json" \
#       #       -d '{"email":"test4@hbnb.com","password":"user1234"}' \
#       #       -c cookies.txt)

#       #     echo "🔍 Login response: $response"  # Debug

#       #     JWT_TOKEN=$(echo "$response" | jq -r '.token')

#       #     if [ -z "$JWT_TOKEN" ] || [ "$JWT_TOKEN" == "null" ]; then
#       #       echo "❌ Login failed!"
#       #       exit 1
#       #     fi

#       #     echo "✅ JWT Token retrieved!"
#       #     echo "::set-output name=jwt_token::$JWT_TOKEN"

#       # - name: 🎫 Create Ticket
#       #   run: |
#       #     echo "🔍 Using JWT Token: ${{ steps.login.outputs.jwt_token }}"  # Debug

#       #     response=$(curl -s -o response.json -w "%{http_code}" -X POST "http://localhost:8082/api/tickets" \
#       #       -H "Content-Type: application/json" \
#       #       -H "Authorization: Bearer ${{ steps.login.outputs.jwt_token }}" \
#       #       -d '{"numbers":[1,2,3,4,5],"luckyNumber":6, "drawDate":"2025-03-12"}' \
#       #       -b cookies.txt)

#       #     cat response.json  # Debug

#       #     if [ "$response" -eq 201 ]; then
#       #       echo "✅ Ticket successfully created!"
#       #     else
#       #       echo "❌ Failed to create ticket. HTTP Code: $response"
#       #       exit 1
#       #     fi

#       # - name: 🔄 Run Loto Scraper
#       #   run: |
#       #     response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8082/api/loto/scrape")
#       #     if [ "$response" -eq 200 ]; then
#       #       echo "✅ Scraping successfully started!"
#       #     else
#       #       echo "❌ Scraping failed. HTTP Code: $response"
#       #       exit 1
#       #     fi

#       # - name: 🏆 Calculate Ticket Winnings
#       #   run: |
#       #     response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8082/api/gains/calculate")
#       #     if [ "$response" -eq 200 ]; then
#       #       echo "✅ Ticket winnings calculated!"
#       #     else
#       #       echo "❌ Ticket winnings calculation failed. HTTP Code: $response"
#       #       exit 1
#       #     fi

#       - name: 🔍 Get Available Draw Dates
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/tirages/dates")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Available draw dates retrieved!"
#           else
#             echo "❌ Failed to retrieve draw dates. HTTP Code: $response"
#             exit 1
#           fi

#       - name: 📜 Get Last 20 Lottery Results
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/historique/last20")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Last 20 lottery results retrieved!"
#           else
#             echo "❌ Failed to retrieve lottery results. HTTP Code: $response"
#             exit 1
#           fi

#       - name: 🔒 Get Authenticated User Info
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/auth/me" \
#             -H "Authorization: Bearer ${{ steps.login.outputs.jwt_token }}" \
#             -b cookies.txt)

#           if [ "$response" -eq 200 ]; then
#             echo "✅ Authenticated user info retrieved!"
#           else
#             echo "❌ Failed to retrieve authenticated user info. HTTP Code: $response"
#             exit 1
#           fi

#       # - name: 📑 Get Ticket Info
#       #   run: |
#       #     response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/tickets")
#       #     if [ "$response" -eq 200 ]; then
#       #       echo "✅ Ticket info retrieved!"
#       #     else
#       #       echo "❌ Failed to retrieve ticket info. HTTP Code: $response"
#       #       exit 1
#       #     fi


#       # 🏷 Vérifier le ticket soumis
#       - name: 📑 Get Ticket Info
#         run: |
#           curl -X GET "http://localhost:8082/api/tickets"

#       - name: 🛑 Stop & Clean Docker Containers
#         run: docker compose down -v

#   deploy:
#     name: 🚀 Deploy to Vercel
#     runs-on: ubuntu-latest
#     needs: test-integration

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: ⚡ Install Vercel CLI
#         run: npm install -g vercel

#       # - name: 🚀 Deploy Swagger UI on Vercel
#       #   run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}


#********************************************************************************************
# name: 🚀 CI/CD - Loto Tracker API (Install and run Spring Boot / Integration Tests with Docker, MongoDB, and SQLite)

# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main
#       - develop

# jobs:
#   build:
#     name: 🏗 Build API with Maven (before Docker)
#     runs-on: ubuntu-latest

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'
#           cache: 'maven'

#       - name: 📦 Build with Maven (install dependencies)
#         run: mvn clean install

#       - name: 🧪 Run Unit Tests with Maven
#         run: mvn test

#   test-integration:
#     name: 🐳 Docker & Integration Tests
#     runs-on: ubuntu-latest
#     needs: build

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔧 Install Docker and Docker Compose
#         run: |
#           sudo apt update
#           sudo apt install -y ca-certificates curl gnupg
#           sudo install -m 0755 -d /etc/apt/keyrings
#           curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
#           sudo chmod a+r /etc/apt/keyrings/docker.asc
#           echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#           sudo apt update
#           sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
#           docker --version
#           docker compose version

#       - name: 🐳 Start Docker Containers (MySQL, SQLite & MongoDB)
#         run: docker compose up -d --build

#       # ⏳ Attendre que l'API soit prête
#       - name: ⏳ Wait for API & Swagger UI to be ready
#         run: |
#           echo "Waiting for API..."
#           until curl --output /dev/null --silent --head --fail http://localhost:8082/api/hello; do
#             printf '.'
#             sleep 5
#           done
#           echo "✅ API is ready!"

#       # 🔑 Authentification - Récupérer le token JWT
#       - name: 🔑 Login User & Retrieve JWT Token
#         id: login
#         run: |
#           JWT_TOKEN=$(curl -s -X POST "http://localhost:8082/api/auth/login3" \
#             -H "Content-Type: application/json" \
#             -d '{"email":"test4@hbnb.com","password":"user1234"}' \
#             -c cookies.txt | jq -r '.token')

#           if [ -z "$JWT_TOKEN" ]; then
#             echo "❌ Login failed!"
#             exit 1
#           fi

#           echo "✅ JWT Token retrieved!"
#           echo "JWT_TOKEN=$JWT_TOKEN" >> $GITHUB_ENV

#       # 🎫 Tester la soumission d’un ticket
#       - name: 🎫 Create Ticket
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X POST "http://localhost:8082/api/tickets" \
#             -H "Content-Type: application/json" \
#             -H "Authorization: Bearer ${{ env.JWT_TOKEN }}" \
#             -d '{"numbers":[1,2,3,4,5],"luckyNumber":6, "drawDate":"2025-03-12"}' \
#             -b cookies.txt)

#           if [ "$response" -eq 201 ]; then
#             echo "✅ Ticket successfully created!"
#           else
#             echo "❌ Failed to create ticket. HTTP Code: $response"
#             exit 1
#           fi

#       # 🔄 Scraping des résultats FDJ
#       - name: 🔄 Run Loto Scraper
#         run: |
#           response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8082/api/loto/scrape")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Scraping successfully started!"
#           else
#             echo "❌ Scraping failed. HTTP Code: $response"
#             exit 1
#           fi

#       # 🏆 Calcul automatique des gains
#       - name: 🏆 Calculate Ticket Winnings
#         run: |
#           response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8082/api/gains/calculate")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Ticket winnings calculated!"
#           else
#             echo "❌ Ticket winnings calculation failed. HTTP Code: $response"
#             exit 1
#           fi

#       # 🔍 Vérifier les dates de tirage
#       - name: 🔍 Get Available Draw Dates
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/tirages/dates")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Available draw dates retrieved!"
#           else
#             echo "❌ Failed to retrieve draw dates. HTTP Code: $response"
#             exit 1
#           fi

#       # 📜 Vérifier l'historique des résultats
#       - name: 📜 Get Last 20 Lottery Results
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/historique/last20")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Last 20 lottery results retrieved!"
#           else
#             echo "❌ Failed to retrieve lottery results. HTTP Code: $response"
#             exit 1
#           fi

#       # 🔒 Vérifier l'utilisateur authentifié
#       - name: 🔒 Get Authenticated User Info
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/auth/me" \
#             -H "Authorization: Bearer ${{ env.JWT_TOKEN }}" \
#             -b cookies.txt)

#           if [ "$response" -eq 200 ]; then
#             echo "✅ Authenticated user info retrieved!"
#           else
#             echo "❌ Failed to retrieve authenticated user info. HTTP Code: $response"
#             exit 1
#           fi

#       # 📑 Vérifier les tickets soumis
#       - name: 📑 Get Ticket Info
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/tickets")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Ticket info retrieved!"
#           else
#             echo "❌ Failed to retrieve ticket info. HTTP Code: $response"
#             exit 1
#           fi

#       - name: 🛑 Stop & Clean Docker Containers
#         run: docker compose down -v

#   deploy:
#     name: 🚀 Deploy to Vercel
#     runs-on: ubuntu-latest
#     needs: test-integration

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: ⚡ Install Vercel CLI
#         run: npm install -g vercel

#       # - name: 🚀 Deploy Swagger UI on Vercel
#       #   run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}

#********************************************************************************************
# name: 🚀 CI/CD - Loto Tracker API (Install and run Spring Boot / Integration Tests with Docker, MongoDB, and SQLite)

# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main
#       - develop

# jobs:
#   build:
#     name: 🏗 Build API with Maven (before Docker)
#     runs-on: ubuntu-latest

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'
#           cache: 'maven'

#       - name: 📦 Build with Maven (install dependencies)
#         run: mvn clean install

#       - name: 🧪 Run Unit Tests with Maven
#         run: mvn test

#   test-integration:
#     name: 🐳 Docker & Integration Tests
#     runs-on: ubuntu-latest
#     needs: build

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # - name: 🔧 Install Docker and Docker Compose
#       #   run: |
#       #     sudo apt update
#       #     sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
#       #     docker --version
#       #     docker compose version

#       - name: 🔧 Install Docker and Docker Compose
#         run: |
#           sudo apt update
#           sudo apt install -y ca-certificates curl gnupg
#           sudo install -m 0755 -d /etc/apt/keyrings
#           curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
#           sudo chmod a+r /etc/apt/keyrings/docker.asc
#           echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#           sudo apt update
#           sudo apt install -y docker-ce docker-ce-cli containerd.io

#           # Installer Docker Compose manuellement
#           DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
#           mkdir -p $DOCKER_CONFIG/cli-plugins
#           curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
#           chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose

#           # Vérification des versions installées
#           docker --version
#           docker compose version


#       - name: 🐳 Start Docker Containers (MySQL, SQLite & MongoDB)
#         run: docker compose up -d --build

#       # ⏳ Attendre que l'API soit prête
#       - name: ⏳ Wait for API & Swagger UI to be ready
#         run: |
#           echo "Waiting for API..."
#           until curl --output /dev/null --silent --head --fail http://localhost:8082/api/hello; do
#             printf '.'
#             sleep 5
#           done
#           echo "✅ API is ready!"

#       # 🔑 Authentification - Récupérer le token JWT
#       - name: 🔑 Login User & Retrieve JWT Token
#         id: login
#         run: |
#           JWT_TOKEN=$(curl -s -X POST "http://localhost:8082/api/auth/login3" \
#             -H "Content-Type: application/json" \
#             -d '{"email":"test4@hbnb.com","password":"user1234"}' \
#             -c cookies.txt | jq -r '.token')

#           if [ -z "$JWT_TOKEN" ] || [ "$JWT_TOKEN" == "null" ]; then
#             echo "❌ Login failed!"
#             exit 1
#           fi

#           echo "✅ JWT Token retrieved!"
#           echo "JWT_TOKEN=$JWT_TOKEN" >> $GITHUB_ENV

#       - name: 🔍 Debug JWT Token
#         run: |
#           echo "🔍 JWT Token: ${{ env.JWT_TOKEN }}"


#       # 🎫 Tester la soumission d’un ticket
#       - name: 🎫 Create Ticket
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X POST "http://localhost:8082/api/tickets" \
#             -H "Content-Type: application/json" \
#             -H "Authorization: Bearer ${{ env.JWT_TOKEN }}" \
#             -d '{"numbers":[1,2,3,4,5],"luckyNumber":6, "drawDate":"2025-03-12"}' \
#             -b cookies.txt)

#           echo "🔍 Response JSON:"
#           cat response.json

#           if [ "$response" -eq 201 ]; then
#             echo "✅ Ticket successfully created!"
#           else
#             echo "❌ Failed to create ticket. HTTP Code: $response"
#             exit 1
#           fi

#       # 🔄 Scraping des résultats FDJ
#       - name: 🔄 Run Loto Scraper
#         run: |
#           response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8082/api/loto/scrape")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Scraping successfully started!"
#           else
#             echo "❌ Scraping failed. HTTP Code: $response"
#             exit 1
#           fi

#       # 🏆 Calcul automatique des gains
#       - name: 🏆 Calculate Ticket Winnings
#         run: |
#           response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8082/api/gains/calculate")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Ticket winnings calculated!"
#           else
#             echo "❌ Ticket winnings calculation failed. HTTP Code: $response"
#             exit 1
#           fi

#       # 🔍 Vérifier les dates de tirage
#       - name: 🔍 Get Available Draw Dates
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/tirages/dates")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Available draw dates retrieved!"
#           else
#             echo "❌ Failed to retrieve draw dates. HTTP Code: $response"
#             exit 1
#           fi

#       # 📜 Vérifier l'historique des résultats
#       - name: 📜 Get Last 20 Lottery Results
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/historique/last20")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Last 20 lottery results retrieved!"
#           else
#             echo "❌ Failed to retrieve lottery results. HTTP Code: $response"
#             exit 1
#           fi

#       # 🔒 Vérifier l'utilisateur authentifié
#       - name: 🔒 Get Authenticated User Info
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/auth/me" \
#             -H "Authorization: Bearer ${{ env.JWT_TOKEN }}" \
#             -b cookies.txt)

#           if [ "$response" -eq 200 ]; then
#             echo "✅ Authenticated user info retrieved!"
#           else
#             echo "❌ Failed to retrieve authenticated user info. HTTP Code: $response"
#             exit 1
#           fi

#       # 📑 Vérifier les tickets soumis
#       - name: 📑 Get Ticket Info
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/tickets")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Ticket info retrieved!"
#           else
#             echo "❌ Failed to retrieve ticket info. HTTP Code: $response"
#             exit 1
#           fi

#       - name: 🛑 Stop & Clean Docker Containers
#         run: docker compose down -v

#   deploy:
#     name: 🚀 Deploy to Vercel
#     runs-on: ubuntu-latest
#     needs: test-integration

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: ⚡ Install Vercel CLI
#         run: npm install -g vercel

#       # - name: 🚀 Deploy Swagger UI on Vercel
#       #   run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}

# #********************************************************************************************
# name: 🚀 CI/CD - Loto Tracker API (Install and run Spring Boot / Integration Tests with Docker, MongoDB, and SQLite)

# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main
#       - develop

# jobs:
#   build:
#     name: 🏗 Build API with Maven (before Docker)
#     runs-on: ubuntu-latest

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'
#           cache: 'maven'

#       - name: 📦 Build with Maven (install dependencies)
#         run: mvn clean install

#       - name: 🧪 Run Unit Tests with Maven
#         run: mvn test

#   test-integration:
#     name: 🐳 Docker & Integration Tests
#     runs-on: ubuntu-latest
#     needs: build

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # - name: 🔧 Install Docker and Docker Compose
#       #   run: |
#       #     sudo apt update
#       #     sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
#       #     docker --version
#       #     docker compose version

#       - name: 🔧 Install Docker and Docker Compose
#         run: |
#           sudo apt update
#           sudo apt install -y ca-certificates curl gnupg
#           sudo install -m 0755 -d /etc/apt/keyrings
#           curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
#           sudo chmod a+r /etc/apt/keyrings/docker.asc
#           echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#           sudo apt update
#           sudo apt install -y docker-ce docker-ce-cli containerd.io

#           # Installer Docker Compose manuellement
#           DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
#           mkdir -p $DOCKER_CONFIG/cli-plugins
#           curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
#           chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose

#           # Vérification des versions installées
#           docker --version
#           docker compose version


#       - name: 🐳 Start Docker Containers (MySQL, SQLite & MongoDB)
#         run: docker compose up -d --build

#       # ⏳ Attendre que l'API soit prête
#       - name: ⏳ Wait for API & Swagger UI to be ready
#         run: |
#           echo "Waiting for API..."
#           until curl --output /dev/null --silent --head --fail http://localhost:8082/api/hello; do
#             printf '.'
#             sleep 5
#           done
#           echo "✅ API is ready!"

#       # 🔑 Authentification - Récupérer le token JWT
#       - name: 🔑 Login User & Retrieve JWT Token
#         id: login
#         run: |
#           JWT_TOKEN=$(curl -s -X POST "http://localhost:8082/api/auth/login3" \
#             -H "Content-Type: application/json" \
#             -d '{"email":"test4@hbnb.com","password":"user1234"}' \
#             -c cookies.txt | jq -r '.token')

#           if [ -z "$JWT_TOKEN" ] || [ "$JWT_TOKEN" == "null" ]; then
#             echo "❌ Login failed!"
#             exit 1
#           fi

#           echo "✅ JWT Token retrieved!"
#           echo "JWT_TOKEN=$JWT_TOKEN" >> $GITHUB_ENV

#       # - name: 🔍 Debug JWT Token
#       #   run: |
#       #     echo "🔍 JWT Token: ${{ env.JWT_TOKEN }}"
#       - name: 🔍 Debug JWT Token
#         run: |
#           echo "🔍 JWT Token: ${{ env.JWT_TOKEN }}"
#           echo $JWT_TOKEN | cut -d "." -f2 | base64 -d | jq .



#       # 🎫 Tester la soumission d’un ticket
#       - name: 🎫 Create Ticket
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X POST "http://localhost:8082/api/tickets" \
#             -H "Content-Type: application/json" \
#             -H "Accept: application/json" \
#             -H "Authorization: Bearer ${{ env.JWT_TOKEN }}" \
#             -d '{"numbers":[1,2,3,4,5],"luckyNumber":6, "drawDate":"2025-03-12"}' \
#             -b cookies.txt)

#           echo "🔍 Response JSON:"
#           cat response.json

#           if [ "$response" -eq 201 ]; then
#             echo "✅ Ticket successfully created!"
#           else
#             echo "❌ Failed to create ticket. HTTP Code: $response"
#             exit 1
#           fi


#       # 🔄 Scraping des résultats FDJ
#       - name: 🔄 Run Loto Scraper
#         run: |
#           response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8082/api/loto/scrape")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Scraping successfully started!"
#           else
#             echo "❌ Scraping failed. HTTP Code: $response"
#             exit 1
#           fi

#       # 🏆 Calcul automatique des gains
#       - name: 🏆 Calculate Ticket Winnings
#         run: |
#           response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8082/api/gains/calculate")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Ticket winnings calculated!"
#           else
#             echo "❌ Ticket winnings calculation failed. HTTP Code: $response"
#             exit 1
#           fi

#       # 🔍 Vérifier les dates de tirage
#       - name: 🔍 Get Available Draw Dates
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/tirages/dates")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Available draw dates retrieved!"
#           else
#             echo "❌ Failed to retrieve draw dates. HTTP Code: $response"
#             exit 1
#           fi

#       # 📜 Vérifier l'historique des résultats
#       - name: 📜 Get Last 20 Lottery Results
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/historique/last20")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Last 20 lottery results retrieved!"
#           else
#             echo "❌ Failed to retrieve lottery results. HTTP Code: $response"
#             exit 1
#           fi

#       # 🔒 Vérifier l'utilisateur authentifié
#       - name: 🔒 Get Authenticated User Info
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/auth/me" \
#             -H "Authorization: Bearer ${{ env.JWT_TOKEN }}" \
#             -b cookies.txt)

#           if [ "$response" -eq 200 ]; then
#             echo "✅ Authenticated user info retrieved!"
#           else
#             echo "❌ Failed to retrieve authenticated user info. HTTP Code: $response"
#             exit 1
#           fi

#       # 📑 Vérifier les tickets soumis
#       - name: 📑 Get Ticket Info
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/tickets")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Ticket info retrieved!"
#           else
#             echo "❌ Failed to retrieve ticket info. HTTP Code: $response"
#             exit 1
#           fi

#       - name: 🛑 Stop & Clean Docker Containers
#         run: docker compose down -v

#   deploy:
#     name: 🚀 Deploy to Vercel
#     runs-on: ubuntu-latest
#     needs: test-integration

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: ⚡ Install Vercel CLI
#         run: npm install -g vercel

#       # - name: 🚀 Deploy Swagger UI on Vercel
#       #   run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}

# #********************************************************************************************
# name: 🚀 CI/CD - Loto Tracker API (Install and run Spring Boot / Integration Tests with Docker, MongoDB, and SQLite)

# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main
#       - develop

# jobs:
#   build:
#     name: 🏗 Build API with Maven (before Docker)
#     runs-on: ubuntu-latest

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'
#           cache: 'maven'

#       - name: 📦 Build with Maven (install dependencies)
#         run: mvn clean install

#       - name: 🧪 Run Unit Tests with Maven
#         run: mvn test

#   test-integration:
#     name: 🐳 Docker & Integration Tests
#     runs-on: ubuntu-latest
#     needs: build

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # - name: 🔧 Install Docker and Docker Compose
#       #   run: |
#       #     sudo apt update
#       #     sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
#       #     docker --version
#       #     docker compose version

#       - name: 🔧 Install Docker and Docker Compose
#         run: |
#           sudo apt update
#           sudo apt install -y ca-certificates curl gnupg
#           sudo install -m 0755 -d /etc/apt/keyrings
#           curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
#           sudo chmod a+r /etc/apt/keyrings/docker.asc
#           echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#           sudo apt update
#           sudo apt install -y docker-ce docker-ce-cli containerd.io

#           # Installer Docker Compose manuellement
#           DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
#           mkdir -p $DOCKER_CONFIG/cli-plugins
#           curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
#           chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose

#           # Vérification des versions installées
#           docker --version
#           docker compose version


#       - name: 🐳 Start Docker Containers (MySQL, SQLite & MongoDB)
#         run: docker compose up -d --build

#       # ⏳ Attendre que l'API soit prête
#       - name: ⏳ Wait for API & Swagger UI to be ready
#         run: |
#           echo "Waiting for API..."
#           until curl --output /dev/null --silent --head --fail http://localhost:8082/api/hello; do
#             printf '.'
#             sleep 5
#           done
#           echo "✅ API is ready!"

#       # 🔑 Authentification - Récupérer le token JWT
#       - name: 🔑 Login User & Retrieve JWT Token
#         id: login
#         run: |
#           JWT_TOKEN=$(curl -s -X POST "http://localhost:8082/api/auth/login3" \
#             -H "Content-Type: application/json" \
#             -d '{"email":"test4@hbnb.com","password":"user1234"}' \
#             -c cookies.txt | jq -r '.token')

#           if [ -z "$JWT_TOKEN" ] || [ "$JWT_TOKEN" == "null" ]; then
#             echo "❌ Login failed!"
#             exit 1
#           fi

#           echo "✅ JWT Token retrieved!"
#           echo "JWT_TOKEN=$JWT_TOKEN" >> $GITHUB_ENV

#       # - name: 🔍 Debug JWT Token
#       #   run: |
#       #     echo "🔍 JWT Token: ${{ env.JWT_TOKEN }}"
#       - name: 🔍 Debug JWT Token
#         run: |
#           echo "🔍 JWT Token: ${{ env.JWT_TOKEN }}"
#           echo $JWT_TOKEN | cut -d "." -f2 | base64 -d | jq .

#       # 🔒 Check API Access for User
#       - name: 🔒 Check API Access for User
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/auth/me" \
#             -H "Authorization: Bearer ${{ env.JWT_TOKEN }}" \
#             -H "Accept: application/json" \
#             -b cookies.txt)

#           echo "🔍 User Info Response:"
#           cat response.json

#           if [ "$response" -eq 200 ]; then
#             echo "✅ Authenticated user info retrieved!"
#           else
#             echo "❌ Failed to retrieve user info. HTTP Code: $response"
#             exit 1
#           fi




#       # 🎫 Tester la soumission d’un ticket
#       - name: 🎫 Create Ticket
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X POST "http://localhost:8082/api/tickets" \
#             -H "Content-Type: application/json" \
#             -H "Accept: application/json" \
#             -H "Authorization: Bearer ${{ env.JWT_TOKEN }}" \
#             -d '{"numbers":[1,2,3,4,5],"luckyNumber":6, "drawDate":"2025-03-12"}' \
#             -b cookies.txt)

#           echo "🔍 Response JSON:"
#           cat response.json

#           if [ "$response" -eq 201 ]; then
#             echo "✅ Ticket successfully created!"
#           else
#             echo "❌ Failed to create ticket. HTTP Code: $response"
#             exit 1
#           fi


#       # 🔄 Scraping des résultats FDJ
#       - name: 🔄 Run Loto Scraper
#         run: |
#           response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8082/api/loto/scrape")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Scraping successfully started!"
#           else
#             echo "❌ Scraping failed. HTTP Code: $response"
#             exit 1
#           fi

#       # 🏆 Calcul automatique des gains
#       - name: 🏆 Calculate Ticket Winnings
#         run: |
#           response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8082/api/gains/calculate")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Ticket winnings calculated!"
#           else
#             echo "❌ Ticket winnings calculation failed. HTTP Code: $response"
#             exit 1
#           fi

#       # 🔍 Vérifier les dates de tirage
#       - name: 🔍 Get Available Draw Dates
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/tirages/dates")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Available draw dates retrieved!"
#           else
#             echo "❌ Failed to retrieve draw dates. HTTP Code: $response"
#             exit 1
#           fi

#       # 📜 Vérifier l'historique des résultats
#       - name: 📜 Get Last 20 Lottery Results
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/historique/last20")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Last 20 lottery results retrieved!"
#           else
#             echo "❌ Failed to retrieve lottery results. HTTP Code: $response"
#             exit 1
#           fi

#       # 🔒 Vérifier l'utilisateur authentifié
#       - name: 🔒 Get Authenticated User Info
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/auth/me" \
#             -H "Authorization: Bearer ${{ env.JWT_TOKEN }}" \
#             -b cookies.txt)

#           if [ "$response" -eq 200 ]; then
#             echo "✅ Authenticated user info retrieved!"
#           else
#             echo "❌ Failed to retrieve authenticated user info. HTTP Code: $response"
#             exit 1
#           fi

#       # 📑 Vérifier les tickets soumis
#       - name: 📑 Get Ticket Info
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/tickets")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Ticket info retrieved!"
#           else
#             echo "❌ Failed to retrieve ticket info. HTTP Code: $response"
#             exit 1
#           fi

#       - name: 🛑 Stop & Clean Docker Containers
#         run: docker compose down -v

#   deploy:
#     name: 🚀 Deploy to Vercel
#     runs-on: ubuntu-latest
#     needs: test-integration

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: ⚡ Install Vercel CLI
#         run: npm install -g vercel

#       # - name: 🚀 Deploy Swagger UI on Vercel
#       #   run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}

# #**************okokokokokokokokokokok******************************************************************************
# name: 🚀 CI/CD - Loto Tracker API (Install and run Spring Boot / Integration Tests with Docker, MongoDB, and SQLite)

# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main
#       - develop

# jobs:
#   build:
#     name: 🏗 Build API with Maven (before Docker)
#     runs-on: ubuntu-latest

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'
#           cache: 'maven'

#       - name: 📦 Build with Maven (install dependencies)
#         run: mvn clean install

#       - name: 🧪 Run Unit Tests with Maven
#         run: mvn test

#   test-integration:
#     name: 🐳 Docker & Integration Tests
#     runs-on: ubuntu-latest
#     needs: build

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       # - name: 🔧 Install Docker and Docker Compose
#       #   run: |
#       #     sudo apt update
#       #     sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
#       #     docker --version
#       #     docker compose version

#       - name: 🔧 Install Docker and Docker Compose
#         run: |
#           sudo apt update
#           sudo apt install -y ca-certificates curl gnupg
#           sudo install -m 0755 -d /etc/apt/keyrings
#           curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
#           sudo chmod a+r /etc/apt/keyrings/docker.asc
#           echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#           sudo apt update
#           sudo apt install -y docker-ce docker-ce-cli containerd.io

#           # Installer Docker Compose manuellement
#           DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
#           mkdir -p $DOCKER_CONFIG/cli-plugins
#           curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
#           chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose

#           # Vérification des versions installées
#           docker --version
#           docker compose version


#       - name: 🐳 Start Docker Containers (MySQL, SQLite & MongoDB)
#         run: docker compose up -d --build

#       # ⏳ Wait for API & Swagger UI to be ready
#       - name: ⏳ Wait for API & Swagger UI to be ready
#         run: |
#           echo "Waiting for API..."
#           until curl --output /dev/null --silent --head --fail http://localhost:8082/api/hello; do
#             printf '.'
#             sleep 5
#           done
#           echo "✅ API is ready!"

#       # 🔑 Authentification - Tester le login et récupérer le token JWT
#       - name: 🔑 Login User & Retrieve JWT Token (login3)
#         id: login
#         run: |
#           JWT_TOKEN=$(curl -X POST "http://localhost:8082/api/auth/login3" \
#             -H "Content-Type: application/json" \
#             -d '{"email":"test4@hbnb.com","password":"user1234"}' \
#             -c cookies.txt | jq -r '.token')

#           if [ -z "$JWT_TOKEN" ]; then
#             echo "❌ Login failed!"
#             exit 1
#           fi

#           echo "✅ JWT Token retrieved!"
#           echo "::set-output name=jwt_token::$JWT_TOKEN"

#       # 🎫 Tester la soumission d’un ticket avec JWT
#       - name: 🎫 Create Ticket
#         run: |
#           curl -X POST "http://localhost:8082/api/tickets" \
#             -H "Content-Type: application/json" \
#             -H "Authorization: Bearer ${{ steps.login.outputs.jwt_token }}" \
#             -d '{"numbers":[1,2,3,4,5],"luckyNumber":6, "drawDate":"2025-03-12"}' \
#             -b cookies.txt

#       # 🔄 Scraping des résultats FDJ via le service Spring Boot
#       - name: 🔄 Run Loto Scraper
#         run: |
#           curl -X GET "http://localhost:8082/api/loto/scrape"

#       # 🏆 Calcul automatique des gains via l’API
#       - name: 🏆 Calculate Ticket Winnings
#         run: |
#           curl -X GET "http://localhost:8082/api/gains/calculate"

# #       # 📅 Vérifier les tirages disponibles
# #       - name: 🔍 Get Available Draw Dates
# #         run: |
# #           curl -X GET "http://localhost:8082/api/tirages/dates"

# #       # 📜 Vérifier l'historique des résultats
# #       - name: 📜 Get Last 20 Lottery Results
# #         run: |
# #           curl -X GET "http://localhost:8082/api/historique/last20"

# #       # 🔒 Tester un endpoint protégé avec JWT
# #       - name: 🔒 Get Authenticated User Info
# #         run: |
# #           curl -X GET "http://localhost:8082/api/auth/me" \
# #             -H "Authorization: Bearer ${{ steps.login.outputs.jwt_token }}" \
# #             -b cookies.txt

# #       # 🏷 Vérifier le ticket soumis
# #       - name: 📑 Get Ticket Info
# #         run: |
# #           curl -X GET "http://localhost:8082/api/tickets"

#       # - name: ⏳ Wait for API & Swagger UI to be ready
#       #   run: |
#       #     echo "Waiting for API..."
#       #     until curl --output /dev/null --silent --head --fail http://localhost:8082/api/hello; do
#       #       printf '.'
#       #       sleep 5
#       #     done
#       #     echo "✅ API is ready!"

#       # - name: 🔑 Login User & Retrieve JWT Token
#       #   id: login
#       #   run: |
#       #     response=$(curl -s -X POST "http://localhost:8082/api/auth/login3" \
#       #       -H "Content-Type: application/json" \
#       #       -d '{"email":"test4@hbnb.com","password":"user1234"}' \
#       #       -c cookies.txt)

#       #     echo "🔍 Login response: $response"  # Debug

#       #     JWT_TOKEN=$(echo "$response" | jq -r '.token')

#       #     if [ -z "$JWT_TOKEN" ] || [ "$JWT_TOKEN" == "null" ]; then
#       #       echo "❌ Login failed!"
#       #       exit 1
#       #     fi

#       #     echo "✅ JWT Token retrieved!"
#       #     echo "::set-output name=jwt_token::$JWT_TOKEN"

#       # - name: 🎫 Create Ticket
#       #   run: |
#       #     echo "🔍 Using JWT Token: ${{ steps.login.outputs.jwt_token }}"  # Debug

#       #     response=$(curl -s -o response.json -w "%{http_code}" -X POST "http://localhost:8082/api/tickets" \
#       #       -H "Content-Type: application/json" \
#       #       -H "Authorization: Bearer ${{ steps.login.outputs.jwt_token }}" \
#       #       -d '{"numbers":[1,2,3,4,5],"luckyNumber":6, "drawDate":"2025-03-12"}' \
#       #       -b cookies.txt)

#       #     cat response.json  # Debug

#       #     if [ "$response" -eq 201 ]; then
#       #       echo "✅ Ticket successfully created!"
#       #     else
#       #       echo "❌ Failed to create ticket. HTTP Code: $response"
#       #       exit 1
#       #     fi

#       # - name: 🔄 Run Loto Scraper
#       #   run: |
#       #     response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8082/api/loto/scrape")
#       #     if [ "$response" -eq 200 ]; then
#       #       echo "✅ Scraping successfully started!"
#       #     else
#       #       echo "❌ Scraping failed. HTTP Code: $response"
#       #       exit 1
#       #     fi

#       # - name: 🏆 Calculate Ticket Winnings
#       #   run: |
#       #     response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8082/api/gains/calculate")
#       #     if [ "$response" -eq 200 ]; then
#       #       echo "✅ Ticket winnings calculated!"
#       #     else
#       #       echo "❌ Ticket winnings calculation failed. HTTP Code: $response"
#       #       exit 1
#       #     fi

#       - name: 🔍 Get Available Draw Dates
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/tirages/dates")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Available draw dates retrieved!"
#           else
#             echo "❌ Failed to retrieve draw dates. HTTP Code: $response"
#             exit 1
#           fi

#       - name: 📜 Get Last 20 Lottery Results
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/historique/last20")
#           if [ "$response" -eq 200 ]; then
#             echo "✅ Last 20 lottery results retrieved!"
#           else
#             echo "❌ Failed to retrieve lottery results. HTTP Code: $response"
#             exit 1
#           fi

#       - name: 🔒 Get Authenticated User Info
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/auth/me" \
#             -H "Authorization: Bearer ${{ steps.login.outputs.jwt_token }}" \
#             -b cookies.txt)

#           if [ "$response" -eq 200 ]; then
#             echo "✅ Authenticated user info retrieved!"
#           else
#             echo "❌ Failed to retrieve authenticated user info. HTTP Code: $response"
#             exit 1
#           fi

#       # - name: 📑 Get Ticket Info
#       #   run: |
#       #     response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/tickets")
#       #     if [ "$response" -eq 200 ]; then
#       #       echo "✅ Ticket info retrieved!"
#       #     else
#       #       echo "❌ Failed to retrieve ticket info. HTTP Code: $response"
#       #       exit 1
#       #     fi


#       # 🏷 Vérifier le ticket soumis
#       - name: 📑 Get Ticket Info
#         run: |
#           curl -X GET "http://localhost:8082/api/tickets"


#       # # ⏳ Attendre que l'API soit prête
#       # - name: ⏳ Wait for API & Swagger UI to be ready
#       #   run: |
#       #     echo "Waiting for API..."
#       #     until curl --output /dev/null --silent --head --fail http://localhost:8082/api/hello; do
#       #       printf '.'
#       #       sleep 5
#       #     done
#       #     echo "✅ API is ready!"

#       # # 🔑 Authentification - Récupérer le token JWT
#       # - name: 🔑 Login User & Retrieve JWT Token
#       #   id: login
#       #   run: |
#       #     JWT_TOKEN=$(curl -s -X POST "http://localhost:8082/api/auth/login3" \
#       #       -H "Content-Type: application/json" \
#       #       -d '{"email":"test4@hbnb.com","password":"user1234"}' \
#       #       -c cookies.txt | jq -r '.token')

#       #     if [ -z "$JWT_TOKEN" ] || [ "$JWT_TOKEN" == "null" ]; then
#       #       echo "❌ Login failed!"
#       #       exit 1
#       #     fi

#       #     echo "✅ JWT Token retrieved!"
#       #     echo "JWT_TOKEN=$JWT_TOKEN" >> $GITHUB_ENV

#       # # - name: 🔍 Debug JWT Token
#       # #   run: |
#       # #     echo "🔍 JWT Token: ${{ env.JWT_TOKEN }}"
#       # - name: 🔍 Debug JWT Token
#       #   run: |
#       #     echo "🔍 JWT Token: ${{ env.JWT_TOKEN }}"
#       #     echo $JWT_TOKEN | cut -d "." -f2 | base64 -d | jq .

#       # # 🔒 Check API Access for User
#       # - name: 🔒 Check API Access for User
#       #   run: |
#       #     response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/auth/me" \
#       #       -H "Authorization: Bearer ${{ env.JWT_TOKEN }}" \
#       #       -H "Accept: application/json" \
#       #       -b cookies.txt)

#       #     echo "🔍 User Info Response:"
#       #     cat response.json

#       #     if [ "$response" -eq 200 ]; then
#       #       echo "✅ Authenticated user info retrieved!"
#       #     else
#       #       echo "❌ Failed to retrieve user info. HTTP Code: $response"
#       #       exit 1
#       #     fi




#       # # 🎫 Tester la soumission d’un ticket
#       # - name: 🎫 Create Ticket
#       #   run: |
#       #     response=$(curl -s -o response.json -w "%{http_code}" -X POST "http://localhost:8082/api/tickets" \
#       #       -H "Content-Type: application/json" \
#       #       -H "Accept: application/json" \
#       #       -H "Authorization: Bearer ${{ env.JWT_TOKEN }}" \
#       #       -d '{"numbers":[1,2,3,4,5],"luckyNumber":6, "drawDate":"2025-03-12"}' \
#       #       -b cookies.txt)

#       #     echo "🔍 Response JSON:"
#       #     cat response.json

#       #     if [ "$response" -eq 201 ]; then
#       #       echo "✅ Ticket successfully created!"
#       #     else
#       #       echo "❌ Failed to create ticket. HTTP Code: $response"
#       #       exit 1
#       #     fi


#       # # 🔄 Scraping des résultats FDJ
#       # - name: 🔄 Run Loto Scraper
#       #   run: |
#       #     response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8082/api/loto/scrape")
#       #     if [ "$response" -eq 200 ]; then
#       #       echo "✅ Scraping successfully started!"
#       #     else
#       #       echo "❌ Scraping failed. HTTP Code: $response"
#       #       exit 1
#       #     fi

#       # # 🏆 Calcul automatique des gains
#       # - name: 🏆 Calculate Ticket Winnings
#       #   run: |
#       #     response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8082/api/gains/calculate")
#       #     if [ "$response" -eq 200 ]; then
#       #       echo "✅ Ticket winnings calculated!"
#       #     else
#       #       echo "❌ Ticket winnings calculation failed. HTTP Code: $response"
#       #       exit 1
#       #     fi

#       # # 🔍 Vérifier les dates de tirage
#       # - name: 🔍 Get Available Draw Dates
#       #   run: |
#       #     response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/tirages/dates")
#       #     if [ "$response" -eq 200 ]; then
#       #       echo "✅ Available draw dates retrieved!"
#       #     else
#       #       echo "❌ Failed to retrieve draw dates. HTTP Code: $response"
#       #       exit 1
#       #     fi

#       # # 📜 Vérifier l'historique des résultats
#       # - name: 📜 Get Last 20 Lottery Results
#       #   run: |
#       #     response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/historique/last20")
#       #     if [ "$response" -eq 200 ]; then
#       #       echo "✅ Last 20 lottery results retrieved!"
#       #     else
#       #       echo "❌ Failed to retrieve lottery results. HTTP Code: $response"
#       #       exit 1
#       #     fi

#       # # 🔒 Vérifier l'utilisateur authentifié
#       # - name: 🔒 Get Authenticated User Info
#       #   run: |
#       #     response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/auth/me" \
#       #       -H "Authorization: Bearer ${{ env.JWT_TOKEN }}" \
#       #       -b cookies.txt)

#       #     if [ "$response" -eq 200 ]; then
#       #       echo "✅ Authenticated user info retrieved!"
#       #     else
#       #       echo "❌ Failed to retrieve authenticated user info. HTTP Code: $response"
#       #       exit 1
#       #     fi

#       # # 📑 Vérifier les tickets soumis
#       # - name: 📑 Get Ticket Info
#       #   run: |
#       #     response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/tickets")
#       #     if [ "$response" -eq 200 ]; then
#       #       echo "✅ Ticket info retrieved!"
#       #     else
#       #       echo "❌ Failed to retrieve ticket info. HTTP Code: $response"
#       #       exit 1
#       #     fi

#       # - name: 🛑 Stop & Clean Docker Containers
#       #   run: docker compose down -v

#   deploy:
#     name: 🚀 Deploy to Vercel
#     runs-on: ubuntu-latest
#     needs: test-integration

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: ⚡ Install Vercel CLI
#         run: npm install -g vercel

#       # - name: 🚀 Deploy Swagger UI on Vercel
#       #   run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }}


# #********************************************************
# name: 🚀 CI/CD - Loto Tracker API (Install and run Spring Boot / Integration Tests with Docker, MongoDB, and SQLite)

# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main
#       - develop

# jobs:
#   build:
#     name: 🏗 Build API with Maven (before Docker)
#     runs-on: ubuntu-latest

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'
#           cache: 'maven'

#       - name: 📦 Build with Maven (install dependencies)
#         run: mvn clean install

#       - name: 🧪 Run Unit Tests with Maven
#         run: mvn test

#   test-integration:
#     name: 🐳 Docker & Integration Tests
#     runs-on: ubuntu-latest
#     needs: build

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔧 Install Docker and Docker Compose
#         run: |
#           sudo apt update
#           sudo apt install -y ca-certificates curl gnupg
#           sudo install -m 0755 -d /etc/apt/keyrings
#           curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
#           sudo chmod a+r /etc/apt/keyrings/docker.asc
#           echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#           sudo apt update
#           sudo apt install -y docker-ce docker-ce-cli containerd.io

#           # Installer Docker Compose manuellement
#           DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
#           mkdir -p $DOCKER_CONFIG/cli-plugins
#           curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
#           chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose

#           # Vérification des versions installées
#           docker --version
#           docker compose version

#       - name: 🐳 Start Docker Containers (MySQL, SQLite & MongoDB)
#         run: docker compose up -d --build

#       # ⏳ Attendre que l'API soit prête
#       - name: ⏳ Wait for API & Swagger UI to be ready
#         run: |
#           echo "Waiting for API..."
#           until curl --output /dev/null --silent --head --fail http://localhost:8082/api/hello; do
#             printf '.'
#             sleep 5
#           done
#           echo "✅ API is ready!"

#       # 🔑 Authentification - Récupérer le token JWT
#       - name: 🔑 Login User & Retrieve JWT Token
#         id: login
#         run: |
#           JWT_TOKEN=$(curl -s -X POST "http://localhost:8082/api/auth/login3" \
#             -H "Content-Type: application/json" \
#             -d '{"email":"test4@hbnb.com","password":"user1234"}' \
#             -c cookies.txt | jq -r '.token')

#           if [ -z "$JWT_TOKEN" ] || [ "$JWT_TOKEN" == "null" ]; then
#             echo "❌ Login failed!"
#             exit 1
#           fi

#           echo "✅ JWT Token retrieved!"
#           echo "JWT_TOKEN=$JWT_TOKEN" >> $GITHUB_ENV

#       # 🔍 Vérifier l'utilisateur connecté et ses permissions
#       - name: 🔍 Check User Info & Permissions
#         run: |
#           curl -s -X GET "http://localhost:8082/api/auth/me" \
#             -H "Authorization: Bearer ${{ env.JWT_TOKEN }}" \
#             -H "Accept: application/json" \
#             -b cookies.txt -o response.json

#           echo "🔍 User Info Response:"
#           cat response.json | jq .

#       # 🎫 Tester la soumission d’un ticket avec affichage détaillé
#       - name: 🎫 Create Ticket
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X POST "http://localhost:8082/api/tickets" \
#             -H "Content-Type: application/json" \
#             -H "Accept: application/json" \
#             -H "Authorization: Bearer ${{ env.JWT_TOKEN }}" \
#             -d '{"numbers":[1,2,3,4,5],"luckyNumber":6, "drawDate":"2025-03-12"}' \
#             -b cookies.txt)

#           echo "🔍 Ticket Creation Response:"
#           cat response.json | jq .

#           if [ "$response" -eq 201 ]; then
#             echo "✅ Ticket successfully created!"
#           else
#             echo "❌ Failed to create ticket. HTTP Code: $response"
#             exit 1
#           fi

#       # 🔄 Scraping des résultats FDJ
#       - name: 🔄 Run Loto Scraper
#         run: |
#           response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8082/api/loto/scrape")
#           echo "✅ Scraping successfully started! (HTTP $response)"

#       # 🏆 Calcul automatique des gains
#       - name: 🏆 Calculate Ticket Winnings
#         run: |
#           response=$(curl -s -o /dev/null -w "%{http_code}" -X GET "http://localhost:8082/api/gains/calculate")
#           echo "✅ Ticket winnings calculated! (HTTP $response)"

#       # 📜 Vérifier les résultats du loto
#       - name: 📜 Get Last 20 Lottery Results
#         run: |
#           curl -s -X GET "http://localhost:8082/api/historique/last20" -o response.json
#           echo "🔍 Last 20 Lottery Results:"
#           cat response.json | jq .

#       # 📑 Vérifier les tickets soumis
#       - name: 📑 Get Ticket Info
#         run: |
#           curl -s -X GET "http://localhost:8082/api/tickets" -o response.json
#           echo "🔍 Submitted Tickets Info:"
#           cat response.json | jq .

#       - name: 🛑 Stop & Clean Docker Containers
#         run: docker compose down -v

#   deploy:
#     name: 🚀 Deploy to Vercel
#     runs-on: ubuntu-latest
#     needs: test-integration

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: ⚡ Install Vercel CLI
#         run: npm install -g vercel


# #********************************************************
# name: 🚀 CI/CD - Loto Tracker API (Install and run Spring Boot / Integration Tests with Docker, MongoDB, and SQLite)

# on:
#   push:
#     branches:
#       - main
#       - develop
#   pull_request:
#     branches:
#       - main
#       - develop

# jobs:
#   build:
#     name: 🏗 Build API with Maven (before Docker)
#     runs-on: ubuntu-latest

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔧 Setup JDK 21
#         uses: actions/setup-java@v3
#         with:
#           distribution: 'temurin'
#           java-version: '21'
#           cache: 'maven'

#       - name: 📦 Build with Maven (install dependencies)
#         run: mvn clean install

#       - name: 🧪 Run Unit Tests with Maven
#         run: mvn test

#   test-integration:
#     name: 🐳 Docker & Integration Tests
#     runs-on: ubuntu-latest
#     needs: build

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: 🔧 Install Docker and Docker Compose
#         run: |
#           sudo apt update
#           sudo apt install -y ca-certificates curl gnupg
#           sudo install -m 0755 -d /etc/apt/keyrings
#           curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
#           sudo chmod a+r /etc/apt/keyrings/docker.asc
#           echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#           sudo apt update
#           sudo apt install -y docker-ce docker-ce-cli containerd.io

#           # Installer Docker Compose manuellement
#           DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
#           mkdir -p $DOCKER_CONFIG/cli-plugins
#           curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
#           chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose

#           # Vérification des versions installées
#           docker --version
#           docker compose version

#       - name: 🐳 Start Docker Containers (MySQL, SQLite & MongoDB)
#         run: docker compose up -d --build

#       # ⏳ Attendre que l'API soit prête
#       - name: ⏳ Wait for API & Swagger UI to be ready
#         run: |
#           echo "Waiting for API..."
#           until curl --output /dev/null --silent --head --fail http://localhost:8082/api/hello; do
#             printf '.'
#             sleep 5
#           done
#           echo "✅ API is ready!"

#       # 🔑 Authentification - Récupérer le token JWT
#       - name: 🔑 Login User & Retrieve JWT Token
#         id: login
#         run: |
#           response=$(curl -s -o response.json -X POST "http://localhost:8082/api/auth/login3" \
#             -H "Content-Type: application/json" \
#             -d '{"email":"test4@hbnb.com","password":"user1234"}' \
#             -c cookies.txt)

#           echo "🔍 Login Response JSON:"
#           cat response.json | jq .

#           JWT_TOKEN=$(jq -r '.token' response.json)

#           if [ -z "$JWT_TOKEN" ] || [ "$JWT_TOKEN" == "null" ]; then
#             echo "❌ Login failed!"
#             exit 1
#           fi

#           echo "✅ JWT Token retrieved!"
#           echo "JWT_TOKEN=$JWT_TOKEN" >> $GITHUB_ENV

#       # 🎫 Tester la soumission d’un ticket avec affichage détaillé
#       - name: 🎫 Create Ticket
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X POST "http://localhost:8082/api/tickets" \
#             -H "Content-Type: application/json" \
#             -H "Accept: application/json" \
#             -H "Authorization: Bearer ${{ env.JWT_TOKEN }}" \
#             -d '{"numbers":[1,2,3,4,5],"luckyNumber":6, "drawDate":"2025-03-12"}' \
#             -b cookies.txt)

#           echo "🔍 Ticket Creation Response JSON:"
#           cat response.json | jq .

#           if [ "$response" -eq 201 ]; then
#             echo "✅ Ticket successfully created!"
#           else
#             echo "❌ Failed to create ticket. HTTP Code: $response"
#             exit 1
#           fi

#       # 🔄 Scraping des résultats FDJ
#       - name: 🔄 Run Loto Scraper
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/loto/scrape")
#           echo "🔍 Scraper Response JSON:"
#           cat response.json | jq .

#       # 🏆 Calcul automatique des gains
#       - name: 🏆 Calculate Ticket Winnings
#         run: |
#           response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/gains/calculate")
#           echo "🔍 Winnings Calculation Response JSON:"
#           cat response.json | jq .

#       # 📜 Vérifier les résultats du loto
#       - name: 📜 Get Last 20 Lottery Results
#         run: |
#           curl -s -X GET "http://localhost:8082/api/historique/last20" -o response.json
#           echo "🔍 Last 20 Lottery Results JSON:"
#           cat response.json | jq .

#       # 📑 Vérifier les tickets soumis
#       - name: 📑 Get Ticket Info
#         run: |
#           curl -s -X GET "http://localhost:8082/api/tickets" -o response.json
#           echo "🔍 Submitted Tickets Info JSON:"
#           cat response.json | jq .

#       - name: 🛑 Stop & Clean Docker Containers
#         run: docker compose down -v

#   deploy:
#     name: 🚀 Deploy to Vercel
#     runs-on: ubuntu-latest
#     needs: test-integration

#     steps:
#       - name: 🛠 Checkout code
#         uses: actions/checkout@v4

#       - name: ⚡ Install Vercel CLI
#         run: npm install -g vercel


#********************************************************
name: 🚀 CI/CD - Loto Tracker API (Install and run Spring Boot / Integration Tests with Docker, MongoDB, and SQLite)

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    name: 🏗 Build API with Maven (before Docker)
    runs-on: ubuntu-latest

    steps:
      - name: 🛠 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: 📦 Build with Maven (install dependencies)
        run: mvn clean install

      - name: 🧪 Run Unit Tests with Maven
        run: mvn test

  test-integration:
    name: 🐳 Docker & Integration Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 🛠 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Install Docker and Docker Compose
        run: |
          sudo apt update
          sudo apt install -y ca-certificates curl gnupg
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt update
          sudo apt install -y docker-ce docker-ce-cli containerd.io

          # Installer Docker Compose manuellement
          DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
          mkdir -p $DOCKER_CONFIG/cli-plugins
          curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
          chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose

          # Vérification des versions installées
          docker --version
          docker compose version

      - name: 🐳 Start Docker Containers (MySQL, SQLite & MongoDB)
        run: docker compose up -d --build

      # ⏳ Attendre que l'API soit prête
      - name: ⏳ Wait for API & Swagger UI to be ready
        run: |
          echo "Waiting for API..."
          until curl --output /dev/null --silent --head --fail http://localhost:8082/api/hello; do
            printf '.'
            sleep 5
          done
          echo "✅ API is ready!"

      # 🔑 Authentification - Récupérer le token JWT
      - name: 🔑 Login User & Retrieve JWT Token
        id: login
        run: |
          response=$(curl -s -o response.json -X POST "http://localhost:8082/api/auth/login3" \
            -H "Content-Type: application/json" \
            -d '{"email":"test4@hbnb.com","password":"user1234"}' \
            -c cookies.txt)

          echo "🔍 Login Response JSON:"
          cat response.json | jq .

          JWT_TOKEN=$(jq -r '.token' response.json)

          if [ -z "$JWT_TOKEN" ] || [ "$JWT_TOKEN" == "null" ]; then
            echo "❌ Login failed!"
            exit 1
          fi

          echo "✅ JWT Token retrieved!"
          echo "JWT_TOKEN=$JWT_TOKEN" >> $GITHUB_ENV

      # # 🎫 Tester la soumission d’un ticket avec affichage détaillé
      # - name: 🎫 Create Ticket
      #   run: |
      #     response=$(curl -s -o response.json -w "%{http_code}" -X POST "http://localhost:8082/api/tickets" \
      #       -H "Content-Type: application/json" \
      #       -H "Accept: application/json" \
      #       -H "Authorization: Bearer ${{ env.JWT_TOKEN }}" \
      #       -d '{"numbers":[1,2,3,4,5],"luckyNumber":6, "drawDate":"2025-03-12"}' \
      #       -b cookies.txt)

      #     echo "🔍 Ticket Creation Response JSON:"
      #     cat response.json | jq .

      #     if [ "$response" -eq 201 ]; then
      #       echo "✅ Ticket successfully created!"
      #     else
      #       echo "❌ Failed to create ticket. HTTP Code: $response"
      #       exit 1
      #     fi

      # 🎫 Tester la soumission d’un ticket SANS JWT
      - name: 🎫 Create Ticket (Without JWT)
        run: |
          response=$(curl -s -o response_no_jwt.json -w "%{http_code}" -X POST "http://localhost:8082/api/tickets" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            -d '{"numbers":[1,2,3,4,5],"luckyNumber":6, "drawDate":"2025-03-12"}')

          echo "🔍 Ticket Creation Response JSON (Without JWT):"
          cat response_no_jwt.json | jq .

          if [ "$response" -eq 201 ]; then
            echo "✅ Ticket successfully created without JWT!"
          else
            echo "❌ Failed to create ticket without JWT. HTTP Code: $response"
            exit 1
          fi

      # 🔄 Scraping des résultats FDJ
      - name: 🔄 Run Loto Scraper
        run: |
          response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/loto/scrape")
          echo "🔍 Scraper Response JSON:"
          cat response.json | jq .

      # 🏆 Calcul automatique des gains
      - name: 🏆 Calculate Ticket Winnings
        run: |
          response=$(curl -s -o response.json -w "%{http_code}" -X GET "http://localhost:8082/api/gains/calculate")
          echo "🔍 Winnings Calculation Response JSON:"
          cat response.json | jq .

      # 📜 Vérifier les résultats du loto
      - name: 📜 Get Last 20 Lottery Results
        run: |
          curl -s -X GET "http://localhost:8082/api/historique/last20" -o response.json
          echo "🔍 Last 20 Lottery Results JSON:"
          cat response.json | jq .

      # 📑 Vérifier les tickets soumis
      - name: 📑 Get Ticket Info
        run: |
          curl -s -X GET "http://localhost:8082/api/tickets" -o response.json
          echo "🔍 Submitted Tickets Info JSON:"
          cat response.json | jq .

      - name: 🛑 Stop & Clean Docker Containers
        run: docker compose down -v

  deploy:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: test-integration

    steps:
      - name: 🛠 Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Install Vercel CLI
        run: npm install -g vercel
