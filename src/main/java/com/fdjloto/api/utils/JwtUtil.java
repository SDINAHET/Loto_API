package com.fdjloto.api.utils;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import io.jsonwebtoken.Claims;
import java.util.Date;
import java.nio.charset.StandardCharsets;
import java.security.Key;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Component
public class JwtUtil {

    private static final Logger logger = LoggerFactory.getLogger(JwtUtil.class);

    @Value("${app.jwtSecret}") // Charge la cl√© depuis application.properties
    private String secretKey;

    @Value("${app.jwtExpirationMs}") // Charge le d√©lai d'expiration depuis application.properties
    private int jwtExpirationMs;

    // üîê M√©thode priv√©e pour r√©cup√©rer la cl√© de signature correcte
    private Key getSigningKey() {
        return Keys.hmacShaKeyFor(secretKey.getBytes(StandardCharsets.UTF_8));
    }

    // üîë G√©n√©rer un token JWT avec le r√¥le
    public String generateToken(String email, String role) {
        return Jwts.builder()
                .setSubject(email) // ‚úÖ On passe maintenant l'email
                .claim("role", role) // üî• Ajout du r√¥le dans le token
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + jwtExpirationMs)) // Token valide 24h
                .signWith(getSigningKey(), SignatureAlgorithm.HS256)
                .compact();
    }

    // ‚úÖ Valider un token JWT et r√©cup√©rer le r√¥le
    public String validateToken(String token) {
        try {
            Claims claims = Jwts.parserBuilder()
                    .setSigningKey(getSigningKey()) // ‚úÖ Utilisation de la cl√© de signature
                    .build()
                    .parseClaimsJws(token)
                    .getBody();

            return claims.getSubject(); // R√©cup√®re l'email (sub) depuis le token
        } catch (Exception e) {
            logger.error("‚ùå Erreur de validation du token : {}", e.getMessage());
            return null;
        }
    }

    // üîì R√©cup√©rer le r√¥le depuis le token
    public String getRoleFromToken(String token) {
        Claims claims = Jwts.parserBuilder()
                .setSigningKey(getSigningKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
        return claims.get("role", String.class); // R√©cup√®re le r√¥le depuis les claims
    }
}
